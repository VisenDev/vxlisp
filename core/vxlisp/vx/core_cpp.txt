// :headerfirst
  int refcount = 0;

// :headertype
any
list
map
struct
boolean
number
decimal
float
int
string
func

// :headerfunc
any<-any
any<-func

// :header

/*
  template<typename X> X func() {
         cout << "vfunc in derived class\n";
         return static_cast<X>(2);
      }  
;    

int main()

   derived *bptr = new derived;
   cout << bptr->func<int>() << endl;
   cout << dynamic_cast<base*>(bptr)->func<int>() << endl;

  virtual template<class T> std::shared_ptr<T> vx_new(std::shared_ptr<T> generic_any_1, vx_core::vx_Type_listarg vals);

#include <iostream>
#include <string_view>

class Base
{
public:
	// This version of getThis() returns a pointer to a Base class
	virtual Base* getThis() { std::cout << "called Base::getThis()\n"; return this; }
	void printType() { std::cout << "returned a Base\n"; }
};

class Derived : public Base
{
public:
	// Normally override functions have to return objects of the same type as the base function
	// However, because Derived is derived from Base, it's okay to return Derived* instead of Base*
	Derived* getThis() override { std::cout << "called Derived::getThis()\n";  return this; }
	void printType() { std::cout << "returned a Derived\n"; }
};

int main()
{
	Derived d{};
	Base* b{ &d };
	d.getThis()->printType(); // calls Derived::getThis(), returns a Derived*, calls Derived::printType
	b->getThis()->printType(); // calls Derived::getThis(), returns a Base*, calls Base::printType

	return 0;
}
*/

  typedef std::vector<vx_core::Type_any> vx_Type_listany;
  typedef std::map<std::string, vx_core::Type_any> vx_Type_mapany;

  typedef std::initializer_list<Type_any> vx_Type_listarg;

  extern vx_Type_listany emptylistany;
  extern vx_Type_mapany emptymapany;

  // any_from_any(T, U)
  template <class T, class U> std::shared_ptr<T> any_from_any(std::shared_ptr<T> generic_any_1, std::shared_ptr<U> value);
  // any_from_map(T, T)
  template <class T> std::shared_ptr<T> any_from_map(const std::map<std::string, std::shared_ptr<T>> &map, const std::string key, const std::shared_ptr<T> defaultval);

  // class Async
  template <class T> class Async {
  public:
    std::shared_future<T>* future;
    std::shared_ptr<vx_core::Async<vx_core::Type_any>> async_parent;
    std::function<T(vx_core::Type_any)>* fn;
  };

  // async_await(T, async<T>)
  template <class T> static std::shared_ptr<vx_core::Async<T>> async_await(T generic_any_1, std::shared_ptr<vx_core::Async<T>> async);
  // async_from_async(T, async<U>)
  template <class T, class U> static std::shared_ptr<vx_core::Async<T>> async_from_async(T generic_any_1, std::shared_ptr<vx_core::Async<U>> async);
  // async_from_async_fn(T, async<U>, fn<T>(U))
  template <class T, class U> static std::shared_ptr<vx_core::Async<T>> async_from_async_fn(T generic_any_1, std::shared_ptr<vx_core::Async<U>> async, std::function<T(U)> fn);
  // async_new_from_val (T)
  template <class T> static std::shared_ptr<vx_core::Async<T>> async_new_from_val(T val);

  // boolean_contains_from_set_val(set<T>, val)
  template <class T> bool boolean_contains_from_set_val(std::set<T> set, T val);
  // keyset_from_map(map)
  template <class T> std::set<T> keyset_from_map(std::map<std::string, T> map);
  // list_from_list(T, list<U>)
  template <class T, class U> std::vector<std::shared_ptr<T>> list_from_list(std::shared_ptr<T> generic_any_1, std::vector<std::shared_ptr<U>> list);
  // listaddall(list, listadd)
  template <class T> std::vector<std::shared_ptr<T>> listaddall(std::vector<std::shared_ptr<T>> listtarget, std::vector<std::shared_ptr<T>> listadd);
  // map_from_map(T, map<U>)
  template <class T, class U> std::map<std::string, std::shared_ptr<T>> map_from_map(std::shared_ptr<T> generic_any_1, std::map<std::string, std::shared_ptr<U>> map);
  // string_from_any(val)
  std::string string_from_any(std::any);

  // sync_from_async(generic_any_1, async)
  template <class T> T sync_from_async(T generic_any_1, Async<T>* async);

  class Class_replfunc {
  public:
    virtual vx_core::Type_any vx_repl(vx_core::Type_anylist arglist);
  };

  class Class_replfunc_async {
  public:
    virtual std::shared_ptr<vx_core::Async<vx_core::Type_any>> vx_repl(vx_core::Type_anylist arglist);
  };

// :body

  vx_core::vx_Type_listany vx_core::emptylistany;
  vx_core::vx_Type_mapany vx_core::emptymapany;

  // any_from_any(T, U)
  template <class T, class U> std::shared_ptr<T> vx_core::any_from_any(std::shared_ptr<T> generic_any_1, std::shared_ptr<U> value) {
    T tvalue = dynamic_cast<T>(&value);
    std::shared_ptr<T> output = std::make_shared<T>(tvalue);
    return output;
  }

  // any_from_map(T, key, defaultval)
  template <class T> std::shared_ptr<T> vx_core::any_from_map(const std::map<std::string, std::shared_ptr<T>> &map, const std::string key, const std::shared_ptr<T> defaultval) {
    std::shared_ptr<T> output = defaultval;
    vx_core::vx_Type_mapany::const_iterator iter = map.find(key);
    if (iter != map.end()) {
      output = it->second;
    }
    return output;
  }

  // async_await(T, async<T>)
  template <class T> static std::shared_ptr<T> vx_core::async_await(std::shared_ptr<T> generic_any_1, std::shared_ptr<vx_core::Async<std::shared_ptr<T>>> async) {
    std::shared_future<T> futureT = async->future;
    std::shared_ptr<vx_core::Async<vx_core::Type_any>> async_parent = async->async_parent;
    T valueT;
    if (async_parent == NULL) {
      valueT = futureT.await();
    } else {
      vx_core::Type_any parentval = vx_core::async_await(T generic_any_1, std::Async<vx_core::Type_any> async_parent);
      std::function<T(vx_core::Type_any) fn = async->fn;
      valueT = fn(parentval);
    }
    std::shared_ptr<T> output = std::make_shared<T>(valueT);
    return output;
  }

  // async_from_async(T, async<U>)
  template <class T, class U> static std::shared_ptr<vx_core::Async<std::shared_ptr<T>>> vx_core::async_from_async(std::shared_ptr<T> generic_any_1, std::shared_ptr<vx_core::Async<std::shared_ptr<U>>> async) {
    std::shared_ptr<vx_core::Async<std::shared_ptr<T>>> output = vx_core::async_new_from_val(vx_core::f_empty(generic_any_1));
    return output;
  }

  // async_from_async_fn(T, async<U>, fn<T>(U))
  template <class T, class U> static std::shared_ptr<vx_core::Async<T>> vx_core::async_from_async_fn(T generic_any_1, std::shared_ptr<vx_core::Async<U>> async, std::function<T(U)> fn) {
    std::shared_ptr<vx_core::Async<T>> futureT = this;
    std::shared_ptr<vx_core::Async<U>> output = std::make_shared(vx_core::Async<T>);
    output->future = futureU;
    output->async_parent = async;
    output->fn = fn;
    return output;
  }

  // async_new_from_val(T)
  template <class T> static std::shared_ptr<vx_core::Async<std::shared_ptr<T>>> vx_core::async_new_from_val(std::shared_ptr<T> val) {
    std::promise<T> promise;
    promise.set_value(val);
    std::shared_ptr<vx_core::Async<std:shared_ptr<T>>> output = std::make_shared(promise.get_future());
    return output;
  }

  // boolean_contains_from_set_val(set<T>, val)
  template <class T> bool vx_core::boolean_contains_from_set_val(std::set<T> set, T val) {
    const bool output = container.find(element) != container.end();
    return output;
  }

  // keyset_from_map(map)
  template <class T> std::set<T> vx_core::keyset_from_map(std::map<std::string, T> map) {
    std::set<T> output;
    for (std::map<std::string, T>::iterator it = map.begin(); it != map.end(); ++it) {
      output.push_back(it->first);
    }
    return output;
  }

  // list_from_list(T, list<U>)
  template <class T, class U> std::vector<std::shared_ptr<T>> vx_core::list_from_list(std::shared_ptr<T> generic_any_1, std::vector<std::shared_ptr<U>> list) {
    std::vector<T*> output = reinterpret_cast<std::vector<T*>&>(list);
    return output;
  }

  // listaddall(list, listadd)
  template <class T> std::vector<std::shared_ptr<T>> vx_core::listaddall(std::vector<std::shared_ptr<T>> list, std::vector<std::shared_ptr<T>> listadd) {
    list.insert(list.end(), listadd.begin(), listadd.end());
  }

  // map_from_map(T, map<U>)
  template <class T, class U> std::map<std::string, std::shared_ptr<T>> vx_core::map_from_map(std::shared_ptr<T> generic_any_1, std::map<std::string, std::shared_ptr<U>> map) {
  }

  // string_from_any(val)
  std::string vx_core::string_from_any(std::any) {
    std::string output = "";
    return output;
  }

  // sync_from_async(generic_any_1, async)
  template <class T> std::shared_ptr<T> vx_core::sync_from_async(std::shared_ptr<T> generic_any_1, std::shared_ptr<Async<std::shared_ptr<T>>> async) {
    future = async->future;
    T valuet = future->wait();
    std::shared_ptr<T> output = std::make_shared<T>(valuet);
    return output;
  }

  //class Class_replfunc {
    vx_core::Type_any vx_core::Class_replfunc::vx_repl(vx_core::Type_anylist arglist) {return vx_core::t_any;}
  //};

  //class Class_replfunc_async {
    std::shared_ptr<vx_core::Async<vx_core::Type_any>> vx_core::Class_replfunc_async::vx_repl(vx_core::Type_anylist arglist) {
      return vx_core::async_new_from_val(vx_core::t_any);
    }
  //};

  //class Type_any {

    vx_core::Type_any vx_core::Class_any::vx_type_from_any(vx_core::Type_any val) {
      return val->vx_type(val);
    }

    vx_core::vx_Type_listany vx_core::Class_any::vx_dispose() {
      this->vx_iref = 0;
      return vx_core::emptylistany;
    }

    bool vx_core::Class_any::vx_release() {
      bool output = false;
      if (this->vx_iref < 0) {
      } else if (vx_iref == 0) {
        vx_iref = -1;
        output = true;
      } else {
        vx_iref -= 1;
      }
      return output;
    }

    void vx_core::Class_any::vx_reserve() {this->vx_iref += 1;}

  //};

  //class Type_boolean {

    bool vx_core::Class_boolean::vx_boolean() {return this->vx_p_boolean;}

    vx_core::Type_boolean vx_core::Class_boolean::vx_new_from_boolean(bool isval) {
      vx_core::Type_boolean output = vx_core::c_false;
      if (isval) {
        output = vx_core::c_true;
      }
      return output;
    }

  //};

  //class Type_constdef {
    vx_core::Type_constdef vx_core::Class_constdef::vx_constdef_new(
      std::string pkgname,
      std::string name,
      vx_core::Type_typedef typ
    ) {
      vx_core::Type_constdef output = std::make_shared<Class_constdef>();
      output->vx_p_pkgname = vx_core::t_string->vx_new_from_string(pkgname);
      output->vx_p_name = vx_core::t_string->vx_new_from_string(name);
      output->vx_p_type = typ;
      return output;
    }
  //};

  //class Type_float {
    float vx_core::Class_float::vx_float() {return vx_p_float;}

    vx_core::Type_float vx_core::Class_float::vx_new_from_float(float fval) {
      vx_core::Type_float output = std::make_shared<vx_core::Class_float>();
      output->vx_p_float = fval;
      return output;
    }
  //};

  //class Type_funcdef {
    vx_core::Type_funcdef vx_core::Class_funcdef::vx_funcdef_new(
      std::string pkgname,
      std::string name,
      int idx,
      bool async,
      vx_core::Type_any typ
    ) {
      vx_core::Type_funcdef output = std::make_shared<vx_core::Class_funcdef>();
      output->vx_p_pkgname = vx_core::t_string->vx_new_from_string(pkgname);
      output->vx_p_name = vx_core::t_string->vx_new_from_string(name);
      output->vx_p_idx = vx_core::t_int->vx_new_from_int(idx);
      output->vx_p_async = vx_core::t_boolean->vx_new_from_boolean(async);
      output->vx_p_type = typ;
      return output;
    }
  //};

  //class Type_int {
    int vx_core::Class_int::vx_int() {return vx_p_int;}

    vx_core::Type_int vx_core::Class_int::vx_new_from_int(int ival) {
      vx_core::Type_int output = std::make_shared<vx_core::Class_int>();
      output->vx_p_int = ival;
      return output;
    }
  //};

  //class Type_string {
    std::string vx_core::Class_string::vx_string() {
      return vx_p_string;
    }

    vx_core::Type_string vx_core::Class_string::vx_new_from_string(std::string text) {
      vx_core::Type_string output;
      if (text == "" && vx_core::e_string != NULL) {
        output = vx_core::e_string;
      } else {
        output = std::make_shared<vx_core::Class_string>();
        output->vx_p_string = text;
      }
      return output;
    }
  //};

  //class Type_typedef {
    vx_core::Type_typedef vx_core::Class_typedef::vx_typedef_new(
      std::string pkgname,
      std::string name,
      std::string extend,
      vx_core::Type_typelist traits,
      vx_core::Type_typelist allowtypes,
      vx_core::Type_typelist disallowtypes,
      vx_core::Type_funclist allowfuncs,
      vx_core::Type_funclist disallowfuncs,
      vx_core::Type_anylist allowvalues,
      vx_core::Type_anylist disallowvalues,
      vx_core::Type_argmap properties
    ) {
      vx_core::Type_typedef output = std::make_shared<vx_core::Class_typedef>();
      output->vx_p_pkgname = vx_core::t_string->vx_new_from_string(pkgname);
      output->vx_p_name = vx_core::t_string->vx_new_from_string(name);
      output->vx_p_extend = vx_core::t_string->vx_new_from_string(extend);
      output->vx_p_traits = traits;
      output->vx_p_allowtypes = allowtypes;
      output->vx_p_disallowtypes = disallowtypes;
      output->vx_p_allowfuncs = disallowfuncs;
      output->vx_p_disallowfuncs = disallowfuncs;
      output->vx_p_allowvalues = disallowvalues;
      output->vx_p_disallowvalues = disallowvalues;
      output->vx_p_properties = properties;
      return output;
    }

  //}
