(package vx/ui/html/uihtml
 :libs (lib html  :path vx/web/html)
       (lib doc   :path vx/web/htmldoc)
       (lib event :path vx/event)
       (lib ui    :path vx/ui/ui))

(const layout-app-html : ui/layout
 (copy ui/layout-app
  :fn-layout ui-render-app<-ui-orig-parent)
 :doc "Html App Renderer")

(const layout-label-html : ui/layout
 (copy ui/layout-label
  :fn-layout ui-render-label<-ui-orig-parent)
 :doc "Html Label Renderer")

(const layout-else-html : ui/layout
 (copy ui/layout-else
  :fn-layout ui-render-default<-ui-orig-parent)
 :doc "Html Default Renderer")

(const layoutenginehtml : ui/layoutengine
 (ui/layoutengine
  :layoutmap        (ui/layoutmap<-layoutlist
                     (ui/layoutlist
                      layout-app-html
                      layout-label-html))
  :layoutelse       layout-else-html
  :stylesheetrender stylesheet-render-html))

(func context-write : context
 (doc/context-write)
 :context
 :doc "")

(func divchild<-ui : html/divchild
 [ui : ui/ui]
 (let : html/div
  [uid         : string         := (:uid       ui)
   uimapchild  : ui/uimap       := (:uimap     ui)
   uistyle     : ui/style       := (:style     ui)
   uistyles    : ui/stylelist   := (:stylelist ui)
   styleunique : html/style     := (style<-style
                                    uistyle)
   htmlstyles  : html/stylelist := (stylelist<-stylelist
                                    uistyles)]
  (html/div
   :id uid
   :style-unique styleunique
   :stylelist htmlstyles))
 :doc "Returns a divchildlist of empty divs from a uimap")

(func divchildlist<-uimap : html/divchildlist
 [uimap : ui/uimap]
 (list<-map : html/divchildlist
  uimap
  (fn : html/div
   [key   : string
    value : ui/ui]
   (html/div
    :id key)))
 :doc "Returns a divchildlist of empty divs from a uimap")

(func node-app<-ui-orig-parent : html/node
 [ui     : ui
  orig   : ui
  parent : ui]
 (html/div))

(func node-render<-node-ui : html/node
 [node : html/node
  ui   : ui]
 (let : html/node
  [htmltext : string  := (html/string<-node-indent
                          node
                          2)
   htmldone : boolean := (doc/boolean-replace<-ui-htmltext
                          ui
                          htmltext)]
  node)
 :sideeffects "UI altered"
 :doc "")

(func string-stylename<-name-styletype : string
 [name      : string
  styletype : ui/styletype]
 (if : string
  (then
   (= "" name)
   "")
  (then
   (== styletype ui/styletype-shared)
   (string
    "."
    name))
  (then
   (== styletype ui/styletype-system)
   name)
  (else
   (string
    "#"
    name)))
 :doc "")

(func style<-style : html/style
 [uistyle : ui/style]
 (if : html/style
  (then
   (is-empty uistyle)
   (empty html/style))
  (else
   (let : html/style
    [layout           : ui/layout    := (:layout           uistyle)
     name             : string       := (:name             uistyle)
     pin              : ui/pin       := (:pin              uistyle)
     pointpos         : ui/point     := (:pointpos         uistyle)
     pointsize        : ui/point     := (:pointsize        uistyle)
     styletype        : ui/styletype := (:type             uistyle)
     color-background : string       := (:color-background uistyle)
     color-hoverbkgrd : string       := (:color-hoverbkgrd uistyle)
     posx             : int          := (:x pointpos)
     posy             : int          := (:y pointpos)
     sizex            : int          := (:x pointsize)
     sizey            : int          := (:y pointsize)
     stylename        : string       := (string-stylename<-name-styletype
                                         name
                                         styletype)
     backgroundcolor  : string       := (if : string
                                         (then
                                          (!-empty color-background)
                                          (string
                                           "#"
                                           color-background)))
     position         : string       := (if : string
                                         (then
                                          (or
                                           (== layout layout-app)
                                           (== layout layout-background)
                                           (== layout layout-main)
                                           (== layout layout-navbar)
                                           (== layout layout-parallax)
                                           (== layout layout-statusbar))
                                          "fixed")
                                         (else "relative"))
     top              : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          (string
                                           posy
                                           "mm"))
                                         (then
                                          (== 0 posy)
                                          "")
                                         (else
                                          (string
                                           posy
                                           "mm")))
     bottom           : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          "")
                                         (then
                                          (== pin ui/pin-bottom)
                                          "0mm")
                                         (then
                                          (or
                                           (== pin ui/pin-left)
                                           (== pin ui/pin-center-v))
                                          (string
                                           sizey
                                           "mm")))
     left             : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          "")
                                         (then
                                          (== pin ui/pin-bottom)
                                          (string
                                           posx
                                           "mm"))
                                         (then
                                          (== 0 posx)
                                          "")
                                         (else
                                          (string
                                           posx
                                           "mm")))
     right            : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          "")
                                         (then
                                          (or
                                           (== pin ui/pin-top)
                                           (== pin ui/pin-bottom)
                                           (== pin ui/pin-center-v))
                                          (string
                                           sizex
                                           "mm")))
     height           : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          "100%")
                                         (then
                                          (or
                                           (== pin ui/pin-left)
                                           (== pin ui/pin-right)
                                           (== pin ui/pin-center-v))
                                          "")
                                         (then
                                          (== 0 sizey)
                                          "")
                                         (else
                                          (string
                                           sizey
                                           "mm")))
     width            : string       := (if : string
                                         (then
                                          (== pin ui/pin-expand)
                                          "100%")
                                         (then
                                          (or
                                           (== pin ui/pin-top)
                                           (== pin ui/pin-bottom)
                                           (== pin ui/pin-center-v))
                                          "")
                                         (then
                                          (== 0 sizex)
                                          "")
                                         (else
                                          (string
                                           sizex
                                           "mm")))
     display          : string       := (if : string
                                         (then
                                          (or
                                           (== layout ui/layout-flow-columns)
                                           (== layout ui/layout-flow-rows))
                                           "flex"))
     flexflow         : string       := (if : string
                                         (then
                                          (== layout ui/layout-flow-columns)
                                          "column wrap")
                                         (then
                                          (== layout ui/layout-flow-rows)
                                          "row wrap"))
     aligncontent     : string       := (if : string
                                         (then
                                          (or
                                           (== layout ui/layout-flow-columns)
                                           (== layout ui/layout-flow-rows))
                                           "flex-start"))
     gap              : string       := (if : string
                                         (then
                                          (or
                                           (== layout ui/layout-flow-columns)
                                           (== layout ui/layout-flow-rows))
                                           "1mm"))
     overflowx        : string       := (if : string
                                         (then
                                          (== layout ui/layout-flow-rows)
                                          "scroll"))
     overflowy        : string       := (if : string
                                         (then
                                          (== layout ui/layout-flow-columns)
                                          "scroll"))
     hoverbkgrdcolor  : string       := (if : string
                                         (then
                                          (!= "" color-hoverbkgrd)
                                          (string "#" color-hoverbkgrd)))
     props            : html/propmap := (html/propmap
                                         :background-color backgroundcolor
                                         :display          display
                                         :flex-flow        flexflow
                                         :align-content    aligncontent
                                         :gap              gap
                                         :position         position
                                         :top              top
                                         :bottom           bottom
                                         :left             left
                                         :right            right
                                         :height           height
                                         :width            width
                                         :overflow-x       overflowx
                                         :overflow-y       overflowy)
     hoverprops       : html/propmap := (html/propmap
                                         :background-color hoverbkgrdcolor)
     subprops         : html/subpropmap := (html/subpropmap
                                            "&:hover" hoverprops)]
    (html/style
     :name  stylename
     :props props))))
 :doc "Returns a htmlstyle from a uistyle")

(func stylelist<-stylelist : html/stylelist
 [uistylelist : ui/stylelist]
 (list<-list : html/stylelist
  uistylelist
  style<-style)
 :doc "Returns a htmlstylelist from a uistylemap")

(func stylelist<-stylemap : html/stylelist
 [uistylemap : ui/stylemap]
 (list<-map : html/stylelist
  uistylemap
  (fn : ui/style
   [key   : string
    value : ui/style]
   (style<-style
    value)))
 :doc "Returns a htmlstylelist from a uistylemap")

(func stylemap<-stylemap : html/stylemap
 [uistylemap : ui/stylemap]
 (map<-map : html/stylemap
  uistylemap
  (fn : ui/style
   [key   : string
    value : ui/style]
   (style<-style
    value)))
 :doc "Returns a htmlstylesheet from a uistylesheet")

(func stylesheet<-stylesheet : html/stylesheet
 [uistylesheet : ui/stylesheet]
 (let : html/stylesheet
  [uistylemap : ui/stylemap    := (:stylemap uistylesheet)
   stylelist  : html/stylelist := (stylelist<-stylemap
                                   uistylemap)]
  (html/stylesheet
   :styles stylelist))
 :doc "Returns a htmlstylesheet from a uistylesheet")

(func stylesheet-render-html : ui/stylesheet
 [stylesheetui : ui/stylesheet]
 (let : ui/stylesheet
  [stylesheethtml : html/stylesheet := (stylesheet<-stylesheet
                                        stylesheetui)
   write          : boolean         := (doc/boolean-write<-stylesheet
                                        stylesheethtml)]
  stylesheetui)
 :async
 :doc "")

(func ui-render-app<-ui-orig-parent : ui/ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (let : ui/ui
  [uid      : string            := (:uid ui)
   uimap    : ui/uimap          := (:uimap ui)
   children : html/divchildlist := (divchildlist<-uimap
                                    uimap)
   node     : html/node         := (html/div
                                    :id uid
                                    :nodes children)
   nodechg  : html/node         := (node-render<-node-ui
                                    node
                                    ui)
   uimapchg : ui/uimap          := (ui/uimap-render<-uimap-parent
                                    uimap
                                    ui)]
  (ui/ui
   :uimap uimapchg))
 :doc "")

(func ui-render-label<-ui-orig-parent : ui/ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (let : ui/ui
  [uid      : string            := (:uid       ui)
   data     : any               := (:data      ui)
   uimap    : ui/uimap          := (:uimap     ui)
   uistyle  : ui/style          := (:style     ui)
   uistyles : ui/stylelist      := (:stylelist ui)
   style    : html/style        := (style<-style
                                    uistyle)
   styles   : html/stylelist    := (stylelist<-stylelist
                                    uistyles)
   datatype : any               := (type<-any data)
   text     : string            := (if : string
                                    (then
                                     (= datatype string)
                                     (any<-any : string
                                      data))
                                    (else
                                     (string<-any
                                      data)))
   node     : html/node         := (html/p
                                    :id uid
                                    :style-unique style
                                    :stylelist styles
                                    :text text)
   nodechg  : html/node         := (node-render<-node-ui
                                    node
                                    ui)
   uimapchg : ui/uimap          := (ui/uimap-render<-uimap-parent
                                    uimap
                                    ui)]
  (ui/ui
   :uimap uimapchg))
 :doc "")

(func ui-render-default<-ui-orig-parent : ui/ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (let : ui/ui
  [uid      : string            := (:uid       ui)
   uimap    : ui/uimap          := (:uimap     ui)
   uistyle  : ui/style          := (:style     ui)
   uistyles : ui/stylelist      := (:stylelist ui)
   style    : html/style        := (style<-style
                                    uistyle)
   styles   : html/stylelist    := (stylelist<-stylelist
                                    uistyles)
   children : html/divchildlist := (divchildlist<-uimap
                                    uimap)
   node     : html/node         := (html/div
                                    :id uid
                                    :style-unique style
                                    :stylelist styles
                                    :nodes children)
   nodechg  : html/node         := (node-render<-node-ui
                                    node
                                    ui)
   uimapchg : ui/uimap          := (ui/uimap-render<-uimap-parent
                                    uimap
                                    ui)]
  (ui/ui
   :uimap uimapchg))
 :doc "")
