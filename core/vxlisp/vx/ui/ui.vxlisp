(package vx/ui/ui
 :libs (lib coll  :path vx/collection)
       (lib event :path vx/event)
       (lib file  :path vx/data/file)
       (lib state :path vx/state)
 :doc "Universal Ui Element")

(type align : struct
 :doc "Universal Alignment")

(type bounds : struct
 :properties [left   : int
              right  : int
              top    : int
              bottom : int]
 :doc "Universal Bounds")

(type cursor : struct
 :doc "Univeral Cursor Type")

(type font : struct
 :properties [name      : string
              fontface  : fontface
              fontsize  : int
              fontstyle : fontstyle]
 :doc "Univeral Font Type")

(type fontface : struct
 :properties [name     : string
              weight   : string
              unicode  : string
              filelist : file/filelist]
 :doc "Univeral Font Face Type")

(type fontfacelist : list
 :allowtypes [fontface]
 :doc "List of fontface")

(type fontfacemap : map
 :allowtypes [fontface]
 :doc "Map of fontface")

(type fontmap : map
 :allowtypes [font]
 :doc "Map of font")

(type fontstyle : struct
 :properties [name : string]
 :doc "Univeral Font Style Type")

(type fontstylemap : map
 :allowtypes [fontstyle]
 :doc "Map of fontstyle")

(type image : struct
 :properties [name  : string
              label : string
              file  : file/file]
 :doc "Univeral Image Type")

(type layout : struct
 :properties [name      : string
              fn-layout : ui-render<-ui-orig-parent]
 :doc "Universal Layout")

(type layoutengine : struct
 :properties [name             : string
              boolean-print    : boolean-print
              layoutmap        : layoutmap
              layoutelse       : layout
              stylesheetrender : stylesheet-render]
 :doc "Pluggable layoutengine")

(type layoutlist : list
 :allowtypes [layout]
 :doc "Map of layout")

(type layoutmap : map
 :allowtypes [layout]
 :doc "Map of layout")

(type pin : struct
 :properties [name : string]
 :doc "Pin an element")

(type point : struct
 :properties [x          : int
              y          : int
              z          : int
              t          : int
              i          : int
              ispercent  : boolean
              pointstyle : pointstyle]
 :doc "Universal Point")

(type pointstyle : struct
 :doc "Universal Point Style")

(type style : struct
 :properties [name             : string
              align            : align
              boundsmargin     : bounds
              boundspadding    : bounds
              color-background : string
              color-hoverbkgrd : string
              cursor           : cursor
              font             : font
              hidden           : boolean
              image-background : image
              layout           : layout
              type             : styletype
              pin              : pin
              pointpos         : point
              pointrotate      : point
              pointsize        : point]
 :doc "Universal Style")

(type stylelist : list
 :allowtypes [style]
 :doc "Universal Stylelist")

(type stylemap : map
 :allowtypes [style]
 :doc "Universal Stylemap")

(type stylesheet : struct
 :properties [fontfacemap : fontfacemap
              stylemap    : stylemap]
 :doc "Universal Stylesheet")

(type styletype : struct
 :doc "Universal Style Type")

(type ui : struct
 :properties [uid         : string
              name        : string
              layout      : layout
              parent      : string
              path        : string
              hidden      : boolean
              selected    : boolean
              selectmulti : boolean
              style       : style
              stylelist   : stylelist
              eventmap    : event/eventmap
              data        : any
              uimap       : uimap]
 :doc "Universal UI Element")

(type uilist : list
 :allowtypes [ui]
 :doc "List of ui")

(type uimap : map
 :allowtypes [ui]
 :mutable
 :doc "Map of ui")

(type uiengine : struct
 :properties [parentmap    : uimap
              layoutengine : layoutengine
              stylesheet   : stylesheet
              ui           : ui]
 :doc "Template for uiengine")

(type cursor-pointer : cursor)

(const align-center : align
 :doc "Logical Center Align in parent")

(const align-left : align
 :doc "Logical Left Align in parent")

(const align-right : align
 :doc "Logical Right Align in parent")

(const layout-app : layout
 (layout
  :name "layout-app"))

(const layout-background : layout
 (layout
  :name "layout-background"))

(const layout-button : layout
 (layout
  :name "layout-button"))

(const layout-combobox : layout
 (layout
  :name "layout-combobox"))

(const layout-else : layout
 (layout
  :name "layout-else"))

(const layout-flow-columns : layout
 (layout
  :name "layout-flow-columns"))

(const layout-flow-item : layout
 (layout
  :name "layout-flow-item"))

(const layout-flow-rows : layout
 (layout
  :name "layout-flow-rows"))

(const layout-image : layout
 (layout
  :name "layout-image"))

(const layout-label : layout
 (layout
  :name "layout-label"))

(const layout-main : layout
 (layout
  :name "layout-main"))

(const layout-maxpanel : layout
 (layout
  :name "layout-maxpanel"))

(const layout-menubar : layout
 (layout
  :name "layout-menubar"))

(const layout-menudrawer : layout
 (layout
  :name "layout-menudrawer"))

(const layout-msgbox : layout
 (layout
  :name "layout-msgbox"))

(const layout-navbar : layout
 (layout
  :name "layout-navbar"))

(const layout-navdrawer : layout
 (layout
  :name "layout-navdrawer"))

(const layout-panel : layout
 (layout
  :name "layout-panel"))

(const layout-parallax : layout
 (layout
  :name "layout-parallax"))

(const layout-statusbar : layout
 (layout
  :name "layout-statusbar"))

(const layout-statusdrawer : layout
 (layout
  :name "layout-statusdrawer"))

(const layout-text : layout
 (layout
  :name "layout-text"))

(const layout-textentry : layout
 (layout
  :name "layout-textentry"))

(const layout-titlebar : layout
 (layout
  :name "layout-titlebar"))

(const pin-bottom : pin)

(const pin-center : pin)

(const pin-center-h : pin)

(const pin-center-v : pin)

(const pin-expand : pin)

(const pin-left : pin)

(const pin-right : pin)

(const pin-top : pin)

(const styletype-custom : styletype)

(const styletype-shared : styletype)

(const styletype-system : styletype)

(func boolean-print : boolean
 [ui : ui]
 (let : boolean
  [layoutengine : layoutengine :=
    (layoutengine-readstate)
   fn-print : boolean-print :=
    (:boolean-print layoutengine)]
  (fn-print ui))
 :context
 :doc "Create a print ready version of ui")

(func boolean-writestate<-ui : boolean
 [ui : ui]
 (let : boolean
  [uid : string := (:uid ui)]
  (state/boolean-writestate<-mapname-name-value
   :uimap
   uid
   ui))
 :context
 :doc "")

(func boolean-writestate<-uiengine : boolean
 [uiengine : uiengine]
 (state/boolean-writestate<-name-value
  :uiengine uiengine)
 :context
 :sideeffects "Changes state"
 :doc "Writes the uiengine to state")

(func int-selected<-ui : int
 [ui : ui]
 (let : int
  [uid : string :=
    (string-selected<-ui ui)
   uidlist : stringlist :=
    (stringlist<-ui ui)]
  (coll/int<-stringlist-find
   uidlist
   uid))
 :doc "Returns the position of the currently selected subui")

(func fontfacemap<-fontfacelist : fontfacemap
 [fontfacelist : fontfacelist]
 (map<-list : fontfacemap
  fontfacelist
  (fn : string
   [fontface : fontface]
   (:name fontface)))
 :doc "Returns a fontfacemap from a fontfacelist")

(func layout<-style : layout
 [style : style]
 (:layout style)
 :doc "")

(func layout<-ui : layout
 [ui : ui]
 (let : layout
  [layoutengine : layoutengine := (layoutengine-readstate)]
  (layout<-ui-layoutengine
   ui
   layoutengine))
 :context
 :doc "Returns the layout from layoutengine that matches the ui")

(func layout<-ui-layoutengine : layout
 [ui           : ui
  layoutengine : layoutengine]
 (let : layout
  [layoutmap  : layoutmap := (:layoutmap  layoutengine)
   layoutelse : layout    := (:layoutelse layoutengine)]
  (layout<-ui-layoutmap-else
   ui
   layoutmap
   layoutelse))
 :doc "Returns the layout from layoutengine that matches the ui")

(func layout<-ui-layoutmap-else : layout
 [ui         : ui
  layoutmap  : layoutmap
  layoutelse : layout]
 (let : layout
  [style   : style  := (:style ui)
   layout  : layout := (layout<-style
                        style)
   layname : string := (:name layout)
   layout1 : layout := (any<-map : layout
                        layoutmap
                        layname)
   layout2 : layout := (if : layout
                        (!-empty layout1)
                        layout1
                        layoutelse)]
  layout2)
 :doc "Returns a layout from a given ui, layoutmap, and layoutelse")

(func layoutengine-readstate : layoutengine
 (let : layoutengine
  [uiengine : uiengine := (uiengine-readstate)]
  (:layoutengine uiengine))
 :context
 :doc "Returns the current layoutengine from state")

(func layoutmap<-layoutlist : layoutmap
 [layoutlist : layoutlist]
 (map<-list : layoutmap
  layoutlist
  (fn : string
   [layout : layout]
   (:name layout)))
 :doc "Returns an layoutmap from an layoutlist")

(func string-selected<-ui : string
 [ui : ui]
 (let : string
  [selectedui : ui :=
    (ui-selected<-ui ui)]
  (:uid selectedui))
 :doc "")

(func stringlist<-ui : stringlist
 [ui : ui]
 (let : stringlist
  [uimap  : uimap  := (:uimap ui)]
  (coll/stringlist<-map
   uimap))
 :doc "Return a list of uid of the ui with selected=true")

(func stringlist-selected<-ui : stringlist
 [ui : ui]
 (let : stringlist
  [uimap  : uimap  := (:uimap ui)
   uilist : uilist := (uilist<-uimap
                       uimap)]
  (list<-list : stringlist
   uilist
   (fn : string
    [item : ui]
    (if : string
     (:selected item)
     (:uid item)
     ""))))
 :doc "Return a list of uid of the ui with selected=true")

(func stylemap<-stylelist : stylemap
 [stylelist : stylelist]
 (map<-list
  stylelist
  (fn : string
   [style : style]
   (:name style)))
 :doc "")

(func stylesheet-readstate : stylesheet
 (let : stylesheet
  [uiengine : uiengine := (uiengine-readstate)]
  (:stylesheet uiengine))
 :context
 :doc "Returns the current uiengine from state")

(func stylesheet-render : stylesheet
 [stylesheetui : stylesheet]
 :sideeffects "Stylesheet will be rendered"
 :doc "Template for rendering stylesheet")

(func ui<-layout-ui-orig-parent : ui
 [layout : layout
  uiarg  : ui
  uiorig : ui
  parent : ui]
 (let : ui
  [name : string := (:name layout)
   fn-layout : ui-render<-ui-orig-parent :=
    (:fn-layout layout)
   uichg : ui :=
    (fn-layout
     uiarg
     uiorig
     parent)]
  uichg)
 :doc "")

(func ui-child<-ui-uid : ui
 [ui  : ui
  uid : string]
 (let : ui
  [childmap : uimap := (:uimap ui)]
  (any<-map : ui
   childmap
   uid))
 :doc "Returns then named child from a ui.")

(func ui-from<-event : ui
 [event : event/event]
 (let : ui
  [uid : string := (:from event)]
  (ui-readstate<-uid uid))
 :context
 :doc "Returns (:from event) cast as ui")

(func ui-layout<-ui : ui
 [ui : ui]
 (let : ui
  [uiengine : uiengine := (uiengine-readstate)]
  (ui-layout<-ui-uiengine
   ui
   uiengine))
 :context
 :doc "Returns a ui with a layout added to each ui.")

(func ui-layout<-ui-layoutengine : ui
 [ui           : ui
  layoutengine : layoutengine]
 (let : ui
  [layoutmap  : layoutmap := (:layoutmap  layoutengine)
   layoutelse : layout    := (:layoutelse layoutengine)]
  (ui-layout<-ui-layoutmap-else
   ui
   layoutmap
   layoutelse))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-layout<-ui-layoutmap-else : ui
 [ui : ui
  layoutmap  : layoutmap
  layoutelse : layout]
 (let : ui
  [uimap   : uimap  := (:uimap ui)
   layout1 : layout := (layout<-ui-layoutmap-else
                        ui
                        layoutmap
                        layoutelse)
   uimap2  : uimap  := (uimap-layout<-uimap-layoutmap-else
                        uimap
                        layoutmap
                        layoutelse)]
  (copy ui
   :layout layout1
   :uimap  uimap2))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-layout<-ui-uiengine : ui
 [ui       : ui
  uiengine : uiengine]
 (let : ui
  [layoutengine : layoutengine := (:layoutengine uiengine)]
  (ui-layout<-ui-layoutengine
   ui
   layoutengine))
 :doc "Returns a ui with a layout added to each ui.")

(func ui-readstate<-uid : ui
 [uid : string]
 (state/any-readstate<-mapname-name : ui
  :uimap
  uid)
 :context
 :doc "Returns the named ui from state")

(func ui-render : ui
 [uiarg : ui]
 (ui-render<-ui-orig-parent
  uiarg
  (empty ui)
  (empty ui))
 :doc "")

(func ui-render<-fn-render-ui-orig-parent : ui
 [fn-render : ui-render<-ui-orig-parent
  ui        : ui
  orig      : ui
  parent    : ui]
 (fn-render
  ui
  orig
  parent)
 :doc "Returns a rendered ui")

(func ui-render<-ui-orig-parent : ui
 [ui     : ui
  orig   : ui
  parent : ui]
 (if : ui
  (then
   (== ui orig)
   orig)
  (else
   (let : ui
    [uimap  : uimap  := (:uimap  ui)
     layout : layout := (:layout ui)
     uiout  : ui     := (ui<-layout-ui-orig-parent
                         layout
                         ui
                         orig
                         parent)]
    uiout)))
 :sideeffects "Alters UI"
 :doc "Returns a rendered object from a UI Element.")

(func ui-selected<-ui : ui
 [ui : ui]
 (let : ui
  [uilist : uilist := (uilist-selected<-ui ui)]
  (first<-list : ui
   uilist))
 :doc "Returns the ui of the first ui with selected=true")

(func ui-writechild<-ui-child : ui
 [ui    : ui
  child : ui]
 (let
  [childid : string  := (:uid   child)
   uimap   : uimap   := (:uimap ui)
   write   : boolean := (boolean-write<-map-name-value
                         uimap
                         childid
                         child)]
  ui)
 :doc "Returns the given ui with the child added to uimap")

(func ui-writechildmap<-ui-childmap : ui
 [ui       : ui
  childmap : uimap]
 (let : ui
  [workmap : uimap := (map<-map : uimap
                       childmap
                       (fn : ui
                        [key   : string
                         value : ui]
                        (ui-writechild<-ui-child
                         ui
                         value)))]
  ui)
 :doc "Returns the given ui with the members of childmap added to uimap")

(func uid-selected<-ui : string
 [ui : ui]
 (let : string
  [uidlist : stringlist := (stringlist-selected<-ui ui)]
  (first<-list : string
   uidlist))
 :doc "Returns the uid of the first ui with selected=true")

(func uiengine-readstate : uiengine
 (state/any-readstate<-name : uiengine
  :uiengine)
 :context
 :doc "Returns the current uiengine from state")

(func uiengine-render : uiengine
 [uiengine : uiengine]
 (let : uiengine
  [stylesheet       : stylesheet        := (:stylesheet       uiengine)
   ui               : ui                := (:ui               uiengine)
   layoutengine     : layoutengine      := (:layoutengine     uiengine)
   stylesheetrender : stylesheet-render := (:stylesheetrender layoutengine)
   stylesheetrend   : stylesheet        := (stylesheetrender
                                            stylesheet)
   uirenderer       : ui                := (ui-layout<-ui-layoutengine
                                            ui
                                            layoutengine)
   uirendered       : ui                := (ui-render
                                            uirenderer)]
  (copy uiengine
   :ui uirendered))
 :context
 :doc "Returns a fully rendered ui for a given engine.")

(func uilist<-uimap : uilist
 [uimap : uimap]
 (list<-map : uilist
  uimap
  (fn : ui
   [key  : string
    item : ui]
   item))
 :doc "")

(func uilist-selected<-ui : uilist
 [uiarg : ui]
 (let : uilist
  [uimap  : uimap  := (:uimap uiarg)
   uilist : uilist := (uilist<-uimap
                       uimap)]
  (list<-list : uilist
   uilist
   (fn : ui
    [item : ui]
    (if : ui
     (:selected item)
     item))))
 :doc "Return a uilist of the ui with selected=true")

(func uimap<-uilist : uimap
 [uilist : uilist]
 (map<-list : uimap
  uilist
  (fn : string
   [ui : ui]
   (:uid ui)))
 :doc "")

(func uimap<-uimap-data : uimap
 [uimap : uimap
  data  : any]
 :doc "Template for creating uimap dynamically")

(func uimap-layout<-uimap-layoutmap-else : uimap
 [uimap : uimap
  layoutmap  : layoutmap
  layoutelse : layout]
 (map<-map : uimap
  uimap
  (fn : ui
   [key : string
    ui  : ui]
   (ui-layout<-ui-layoutmap-else
    ui
    layoutmap
    layoutelse)))
 :doc "Returns a uimap with a renderer added to each ui.")

(func uimap-render<-uimap-parent : uimap
 [uimap  : uimap
  parent : ui]
 (map<-map : uimap
  uimap
  (fn : ui
   [key : string
    val : ui]
   (ui-render<-ui-orig-parent
    val
    (empty ui)
    parent)))
 :sideeffects "Alters User Interface"
 :doc "Renders a uimap and returns a rendered uimap.")
