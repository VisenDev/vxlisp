(package vx/repl
 :libs (lib tb :path vx/data/textblock)
       (lib javafuture)

 :doc "Read-Evaluate-Print-Loop processor.")

(type liblist : list
 :allowtypes [string]
 :doc "List of library names")

(type repl : struct
 :properties [type     : any
              repllist : repllist
              async    : boolean
              val      : any]
 :doc "Repl structure")

(type repllist : list
 :allowtypes [repl]
 :doc "List of repl")

/*
(const delimvxlisp : tb/delim
 (tb/delim
  :name "delimvxlisp"
  :delimlist
   (tb/delimlist
    tb/delimcomment
    tb/delimcommentblock
    tb/delimwhitespace
    delimvxlispparen))
 :doc "vxlisp File Delimiters")

(const delimvxlispbracket : tb/delim
 (copy tb/delimbracketsquare
  :name "delimvxlispbracketsquare"
  :delimlist
   (tb/delimlist
    tb/delimcomment
    tb/delimcommentblock
    tb/delimquote
    tb/delimquoteblock
    tb/delimwhitespace
    delimvxlispbracket
    delimvxlispparen))
 :doc "vxlisp Square Bracket Delimiters")

(const delimvxlispparen : tb/delim
 (copy tb/delimparen
  :name "delimvxlispparen"
  :delimlist
   (tb/delimlist
    tb/delimcomment
    tb/delimcommentblock
    tb/delimquote
    tb/delimquoteblock
    tb/delimwhitespace
    delimvxlispbracket
    delimvxlispparen))
 :doc "vxlisp Paren Delimiters")
*/

(func any<-liblist-string : any
 [liblist : liblist
  text    : string :doc "Program to run"]
 (let : any
  [repl : repl := (repl<-liblist-string liblist text)]
  (any<-repl repl))
 :context
 :doc   "Run an arbitrary program in the REPL.")

(func any<-liblist-string-async : any
 [liblist : liblist
  text    : string :doc "Program to run"]
 (let : any
  [repl : repl := (repl<-liblist-string liblist text)
   val  : any  := (any<-repl-async repl)]
  val)
 :async
 :context
 :doc   "Run an arbitrary program in the REPL asynchrously.")

(func any-repl<-functype-args : any
 [type : any
  args : anylist]
 (native
  :cpp
   "vx_core::Type_replfunc replfunc = dynamic_cast<vx_core::Type_replfunc>(type);
    output = replfunc->vx_repl(args);"
  :js
   "const vxvalue = type['vx_value']
    if (vxvalue != undefined) {
      const fn = vxvalue['fn']
      if (fn != undefined) {
        output = fn(...args)
      }
    }"
  :java
   "if (type instanceof Core.Type_replfunc) {
      Core.Type_replfunc replfunc = (Core.Type_replfunc)type;
      output = replfunc.vx_repl(args);
    }")
 :doc "Returns any from a repl func and args.")

(func any<-repl : any
 [repl : repl]
 (let
  [val      : any      := (:val repl)
   repltype : any      := (:type repl)
   repllist : repllist := (:repllist repl)
   args     : anylist  := (anylist<-repllist repllist)]
  (if : any
   (then (!-empty val) val)
   (then (is-func repltype) (any-repl<-functype-args repltype args))
   (else (new repltype args))))
 :context
 :test (test
        "HelloWorld"
        (any<-repl
         (repl
          :type string
          :repllist
           (repllist
            (repl :val "Hello")
            (repl :val "World")
           ))))
       (test
        5
        (any<-repl
         (repl
          :type +
          :repllist
           (repllist
            (repl :val 2)
            (repl :val 3)
           ))))           
 :doc "Run an arbitrary program in the REPL.")

(func any<-repl-async : any
 [repl : repl]
 :async
 :context
 :doc "Run an arbitrary program in the REPL.")

(func anylist<-repllist : anylist
 [repllist : repllist]
 (list<-list : anylist
  repllist
  (fn : any
   [repl : repl]
   (any<-repl repl)))
 :context
 :doc "Run an arbitrary program in the REPL.")

(func macro : any-1
 [anylist : anylist :...]
 :doc "A function that joins any number of values into a string and then parses and evaluates it.")

(func repl<-liblist-string : repl
 [liblist : liblist
  text    : string :doc "Program to run"]
 :doc "Returns a repl from the given text.")
