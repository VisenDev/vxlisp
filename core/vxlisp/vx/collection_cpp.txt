// :headerfirst
// :headertype
// :headerfunc
any<-for-until-loop-max
any<-for-until-loop
any<-for-while-loop-max
any<-for-while-loop
list<-for-while-loop-max
list<-for-while-loop
list<-list-fn-filter
list<-list-start-end
// :header

  // vx_any_from_for_until_loop_max(generic_any_1, start, fn-until, fn-loop, max)
  vx_core::Type_any vx_any_from_for_until_loop_max(vx_core::Type_any generic_any_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_until, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max);

  // vx_any_from_for_while_loop_max(generic_any_1, start, fn-while, fn-loop, max)
  vx_core::Type_any vx_any_from_for_while_loop_max(vx_core::Type_any generic_any_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_while, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max);

  // vx_list_from_for_end_loop(generic_list_1, start, end, fn-loop)
  vx_core::Type_any vx_list_from_for_end_loop(vx_core::Type_any generic_list_1, vx_core::Type_int start, vx_core::Type_int end, vx_core::Func_any_from_int fn_loop);

  // vx_list_from_for_while_loop_max(generic_list_1, start, fn-while, fn-loop, max)
  vx_core::Type_any vx_list_from_for_while_loop_max(vx_core::Type_any generic_list_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_while, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max);

  // vx_list_from_list_fn_filter(generic_list_1, list, fn-any<-any)
  vx_core::Type_any vx_list_from_list_fn_filter(vx_core::Type_any generic_list_1, vx_core::Type_list vallist, vx_core::Func_any_from_any fn_filter);

  // vx_list_from_list_start_end(generic_list_1, list, int, int)
  vx_core::Type_any vx_list_from_list_start_end(vx_core::Type_any generic_list_1, vx_core::Type_list values, vx_core::Type_int start, vx_core::Type_int end);

// :body

  // vx_any_from_for_until_loop_max(generic_any_1, start, fn-until, fn-loop, max)
  vx_core::Type_any vx_any_from_for_until_loop_max(vx_core::Type_any generic_any_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_until, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max) {
		vx_core::Type_any output = start;
    bool iscontinue = true;
    int icount = 0;
    int imax = max->vx_int();
		vx_core::Type_any current = start;
    while (iscontinue) {
      if (icount >= imax) {
        iscontinue = false;
      } else {
        icount += 1;
        vx_core::Type_any previous = current;
        vx_core::vx_reserve(previous);
        current = fn_loop->vx_any_from_any(previous);
        vx_core::vx_release_one_except(previous, current);
        vx_core::vx_ref_plus(current);
        vx_core::Type_boolean valcontinue = fn_until->vx_boolean_from_any(current);
        vx_core::vx_ref_minus(current);
        iscontinue = !valcontinue->vx_boolean();
        vx_core::vx_release(valcontinue);
        output = current;
      }
    }
    vx_core::vx_release_except({start, fn_until, fn_loop, max}, output);
		return output;
	}

  // vx_any_from_for_while_loop_max(generic_any_1, start, fn-while, fn-loop, max)
  vx_core::Type_any vx_any_from_for_while_loop_max(vx_core::Type_any generic_any_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_while, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max) {
		vx_core::Type_any output = start;
    bool iscontinue = true;
    long icount = 0;
    long imax = max->vx_int();
		vx_core::Type_any current = start;
    while (iscontinue) {
      if (icount >= imax) {
        iscontinue = false;
      } else {
        icount += 1;
        vx_core::vx_ref_plus(current);
        vx_core::Type_boolean valcontinue = fn_while->vx_boolean_from_any(current);
        vx_core::vx_ref_minus(current);
        iscontinue = valcontinue->vx_boolean();
        vx_core::vx_release_except(valcontinue, current);
        if (iscontinue) {
          vx_core::Type_any previous = current;
          vx_core::vx_reserve(previous);
          current = fn_loop->vx_any_from_any(previous);
          vx_core::vx_release_one_except(previous, current);
        }
      }
    }
    output = current;
    vx_core::vx_release_except({start, fn_while, fn_loop, max}, output);
		return output;
	}

  // vx_list_from_for_end_loop(generic_list_1, start, end, fn-loop)
  vx_core::Type_any vx_list_from_for_end_loop(vx_core::Type_any generic_list_1, vx_core::Type_int start, vx_core::Type_int end, vx_core::Func_any_from_int fn_loop) {
		vx_core::Type_any output = vx_core::f_empty(generic_list_1);
    vx_core::vx_Type_listany listvals;
    long istart = start->vx_int();
    long iend = end->vx_int();
    if (istart <= iend) {
      for (int i = istart; i <= iend; i++) {
        vx_core::Type_any val = fn_loop->vx_any_from_int(vx_core::vx_new_int(i));
        listvals.push_back(val);
      }
    } else {
      for (int i = istart; i >= iend; i--) {
        vx_core::Type_any val = fn_loop->vx_any_from_int(vx_core::vx_new_int(i));
        listvals.push_back(val);
      }
    }
    if (listvals.size() > 0) {
      output = generic_list_1->vx_new(listvals);
    }
    vx_core::vx_release_except({start, end, fn_loop}, output);
		return output;
	}

  // vx_list_from_for_while_loop_max(generic_list_1, start, fn-while, fn-loop, max)
  vx_core::Type_any vx_list_from_for_while_loop_max(vx_core::Type_any generic_list_1, vx_core::Type_any start, vx_core::Func_boolean_from_any fn_while, vx_core::Func_any_from_any fn_loop, vx_core::Type_int max) {
		vx_core::Type_any output = vx_core::f_empty(generic_list_1);
    vx_core::vx_Type_listany listvals;
    bool iscontinue = true;
    long icount = 0;
    long imax = max->vx_int();
    vx_core::Type_any work = start;
    while (iscontinue) {
      if (icount >= imax) {
        iscontinue = false;
      } else {
        vx_core::Type_boolean valwhile = fn_while->vx_boolean_from_any(work);
        iscontinue = !valwhile->vx_boolean();
        if (iscontinue) {
          icount += 1;
          work = fn_loop->vx_any_from_any(work);
          listvals.push_back(work);
        }
        vx_core::vx_release(valwhile);
      }
    }
    if (listvals.size() > 0) {
      output = generic_list_1->vx_new(listvals);
    }
    vx_core::vx_release_except({start, fn_while, fn_loop, max}, output);
		return output;
	}

  // vx_list_from_list_fn_filter(generic_list_1, list, fn-any<-any)
  vx_core::Type_any vx_list_from_list_fn_filter(vx_core::Type_any generic_list_1, vx_core::Type_list vallist, vx_core::Func_any_from_any fn_filter) {
		vx_core::Type_any output = vx_core::vx_empty(generic_list_1);
    vx_core::vx_Type_listany listval = vallist->vx_list();
    vx_core::vx_Type_listany items;
    for (vx_core::Type_any val : listval) {
      vx_core::Type_any newval = fn_filter->vx_any_from_any(val);
      vx_core::vx_ref_plus(newval);
      vx_core::Type_boolean isempty = vx_core::f_is_empty_1(newval);
      vx_core::vx_ref_minus(newval);
      if (!isempty->vx_boolean()) {
        items.push_back(newval);
      }
      vx_core::vx_release(isempty);
    }
    output = generic_list_1->vx_new(items);
    vx_core::vx_release_except({vallist, fn_filter}, output);
		return output;
	}

  // vx_list_from_list_start_end(generic_list_1, list, int, int)
  vx_core::Type_any vx_list_from_list_start_end(vx_core::Type_any generic_list_1, vx_core::Type_list values, vx_core::Type_int start, vx_core::Type_int end) {
		vx_core::Type_any output = vx_core::vx_empty(generic_list_1);
    long istart = start->vx_int();
    long iend = end->vx_int();
    vx_core::vx_Type_listany listval = values->vx_list();
    long isize = vx_core::vx_int_from_sizet(listval.size());
    if (isize > 0) {
      if (istart < 0) {
        istart = 0;
      }
      if (iend > isize) {
        iend = isize;
      }
			auto first = listval.begin() + istart;
      auto last = listval.begin() + iend;
      vx_core::vx_Type_listany listsub = std::vector(first, last);
      output = generic_list_1->vx_new(listsub);
    }
    vx_core::vx_release_except({values, start, end}, output);
		return output;
	}
