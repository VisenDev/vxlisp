(package vx/data/textblock
 :libs
  (lib collection :path vx/collection)
  (lib type       :path vx/type)
 :doc "Text parser")

(type delim : struct
 :properties
  [name      : string
   starttext : string
   endtext   : string
   startpos  : int
   endpos    : int
   delimlist : delimlist]
 :doc "A delimiter type supporting start and end delimiters and positions.")

(type delimlist : list
 :allowtypes [delim]
 :test (test
        (new delimlist
         delimcomma
         delimwhitespace)
        (delimlist
         delimcomma
         delimwhitespace))
 :doc "A list of delim.")

(type textblock : struct
 :properties
  [name      : string
   text      : string
   startpos  : int
   endpos    : int
   curpos    : int
   line      : int
   column    : int
   delim     : delim
   close     : delim
   parent    : textblock
   children  : textblocklist]
 :doc "A textblock is a tree of text used for parsing by delimter.")

(type textblocklist : list
 :allowtypes [textblock]
 :doc "A list of textblock.")

(const delimbracketangle : delim
 (delim
  :name      "delimbracketangle"
  :starttext "<"
  :endtext   ">")
 :doc "Angle Bracket Delimiter")

(const delimbracketcurly : delim
 (delim
  :name      "delimbracketcurly"
  :starttext "{"
  :endtext   "}")
 :doc "Curly Bracket Delimiter")

(const delimbracketsquare : delim
 (delim
  :name      "delimbracketsquare"
  :starttext "["
  :endtext   "]")
 :doc "Square Bracket Delimiter")

(const delimclose : delim
 (delim
  :name      "delimclose"
  :starttext ""
  :endtext   "")
 :doc "A placeholder delimiter used to mark the close of whatever is the current delimiter.")

(const delimcomma : delim
 (delim
  :name      "delimcomma"
  :starttext ",")
 :doc "Comma Delimiter")

(const delimcomment : delim
 (delim
  :name      "delimcomment"
  :starttext "//"
  :endtext   "\n")
 :doc "Comment Delimiter")

(const delimcommentblock : delim
 (delim
  :name      "delimcommentblock"
  :starttext "/*"
  :endtext   "*/")
 :doc "Block Comment Delimiter")

(const delimline : delim
 (delim
  :name      "delimline"
  :starttext "\n")
 :doc "New Line Delimiter")

(const delimnonwhitespace : delim
 (delim
  :name      "delimnonwhitespace"
  :starttext ":nonwhitespace"
  :endtext   ":whitespace")
 :doc "Placeholder for delimited non-whitespace")

(const delimparen : delim
 (delim
  :name      "delimparen"
  :starttext "("
  :endtext   ")")
 :doc "Parenthesis Delimiter")

(const delimquote : delim
 (delim
  :name      "delimquote"
  :starttext quote
  :endtext   quote)
 :doc "Quote Delimiter")

(const delimquoteblock : delim
 (delim
  :name      "delimquoteblock"
  :starttext "`"
  :endtext   "`")
 :doc "Block Quote Delimiter")

(const delimspace : delim
 (delim
  :name      "delimspace"
  :starttext " "
  :endtext   " ")
 :doc "Space Delimiter")

(const delimtext : delim
 (delim
  :name "delimtext")
 :doc "Placeholder for delimited text")

(const delimwhitespace : delim
 (delim
  :name      "delimwhitespace"
  :starttext ":whitespace"
  :endtext   ":nonwhitespace")
 :doc "Placeholder for delimited whitespace")

(func children<-textblock : textblocklist
 [textblock : textblock]
 (:children textblock)
 :doc "Returns the child textblocks from a given textblock.")

(func delim-close<-delim : delim
 [delim : delim]
 (let : delim
  [delimlist : delimlist := (:delimlist delim)
   endtext   : string    := (:endtext delim)
   addlist   : delimlist :=
    (if : delimlist
     (then (= "" endtext) delimlist)
     (else
      (copy delimlist
       (copy delimclose
        :starttext endtext))))]
  (if : delim
   (then (is-empty addlist) delim)
   (else
    (copy delim
     :delimlist addlist))))
 :test (test
        (copy delimbracketangle
         :delimlist
          (delimlist
           (copy delimclose
            :starttext ">")))
        (delim-close<-delim delimbracketangle))
 :doc "Returns delim with a close delim added.")

(func delim-first<-delim-delim : delim
 [delim1 : delim
  delim2 : delim]
 (let : delim
  [pos1 : int := (:startpos delim1)
   pos2 : int := (:startpos delim2)]
  (if : delim
   (then (< pos2 0) delim1)
   (then (< pos1 0) delim2)
   (then (is-empty delim2) delim1)
   (then (is-empty delim1) delim2)
   (then (< pos2 pos1) delim2)
   (else delim1)))
 :test (test
        (copy delimcomma
         :startpos 1)
        (delim-first<-delim-delim
         (copy delimspace
          :startpos 2)
         (copy delimcomma
          :startpos 1)))
       (test
        (empty delim)
        (delim-first<-delim-delim
         (delim
          :startpos -1)
         (empty delim)))
 :doc "Returns non-empty delim with lowest, non-negative startpos found in string.")

(func delim-first<-string-delimlist-offset : delim
 [text      : string
  delimlist : delimlist
  start     : int]
 (if : delim
  (then
   (is-empty delimlist)
   (empty delim))
  (else
   (let : delim
    [resolvedlist : delimlist :=
     (delimlist-pos<-string-delimlist-offset
      text
      delimlist
      start)]
    (any<-list-reduce : delim
     resolvedlist
     (empty delim)
     delim-first<-delim-delim))))
 :test (test
        (copy delimcomma
         :startpos 1)
        (delim-first<-string-delimlist-offset
         "a, b"
         (delimlist delimspace delimcomma)
         0))
 :doc "Returns delim with lowest startpos found in string.")

(func delim-pos<-string-delim-offset : delim
 [text  : string
  delim : delim
  start : int]
 (let : delim
  [find : string := (:starttext delim)
   work : string := (string<-string-start text start)
   pos  : int    := (int<-string-findkeyword work find)]
  (if : delim
   (= pos -1)
   (copy delim :startpos -1)
   (copy delim :startpos (+ pos start))))
 :test (test
        (copy delimcomma
         :startpos 1)
        (delim-pos<-string-delim-offset
         "a,b"
         delimcomma
         0))
 :doc "Return a delim with istart updated to position of first starttext.")

(func delimlist-pos<-string-delimlist-offset : delimlist
 [text      : string
  delimlist : delimlist
  start     : int]
 (list<-list : delimlist
  delimlist
  (fn : delim
   [delim : delim]
   (delim-pos<-string-delim-offset
    text
    delim
    start)))
 :test (test
        (delimlist
         (copy delimspace
          :startpos 2)
         (copy delimcomma
          :startpos 1))
        (delimlist-pos<-string-delimlist-offset
         "a, b"
         (delimlist delimspace delimcomma)
         0))
 :doc "Returns a delimlist with each delim updated to position of first starttext.")

(func stringlist<-textblocklist : stringlist
 [textblocklist : textblocklist]
 (list<-list : stringlist
  textblocklist
  text<-textblock)
 :test (test
        (stringlist "a" "b")
        (stringlist<-textblocklist
         (textblocklist
          (textblock :text "a")
          (textblock :text "b"))))
 :doc "Returns a stringlist from each (:text textblock).")

(func text<-textblock : string
 [block : textblock]
 (:text block)
 :test (test
        "a"
        (text<-textblock
         (textblock
          :text "a")))
 :doc "Returns the text from a given textblock.")

(func textblock<-string-delim : textblock
 [text  : string
  delim : delim]
 (textblock
  :text text
  :delim delim
  :startpos 0
  :endpos (length<-string text))
 :test (test
        (textblock
         :text "a"
         :startpos 0
         :endpos 1
         :delim delimcomma)
        (textblock<-string-delim
         "a"
         delimcomma))
 :doc "Returns a textblock from a string and delim.")

(func textblock<-textblock-delim : textblock
 [textblock : textblock
  delim     : delim]
 :doc "Returns a parsed textblock from an unparsed one.")

(func textblock-addchild<-textblock-find-child : textblock
 [textblockarg : textblock
  find         : textblock
  child        : textblock]
 (if : textblock
  (then // empty
   (is-empty textblockarg)
   (empty textblock))
  (then // found
   (and (== find textblockarg))
   (copy textblockarg
    :children
     (copy
      (:children textblockarg)
      child)))
  (else // recursion
   (copy textblockarg
    :parent
     (textblock-addchild<-textblock-find-child
      (:parent textblockarg)
      find
      child))))
:doc "Add the child to the given parent textblock.")

(func textblock-delimnotfound : textblock
 [textblockin : textblock]
 (let : textblock
  [delimin : delim     := (:delim textblockin)
   endtext : string    := (:endtext delimin)
   parent  : textblock := (:parent textblockin)
   delimp  : delim     := (:delim parent)
   delims  : delimlist := (:delimlist delimp)]
  (if : textblock
   (then // if delim not closed then error
    (!= "" endtext)
    (copy parent
     :delimlist
      (copy delims
       (copy textblockin
        :parent (empty textblock)
        :msg
         (msg<-error
          (string "Close delim not found: "
          (:name delimin)))))))
   (then // if empty parent then textblockin
    (= parent (empty textblock)) textblockin)
   (else // else add textblockin to parent and return parent
    (textblock-pop textblockin)
   )))
 :doc "Returns a textblock when a delim is not found.")

(func textblock-findparent<-textblock : textblock
 [textblockarg : textblock]
 (let : textblock
  [delimcurr : delim         := (:delim     textblockarg)
   parent    : textblock     := (:parent    textblockarg)
   children  : textblocklist := (:children  textblockarg)
   starttext : string        := (:starttext delimcurr)
   endtext   : string        := (:endtext   delimcurr)]
  (if : textblock
   (then // empty
    (is-empty textblockarg) (empty textblock))
   (then // allows childen
    (and (= starttext "") (= endtext ""))
    textblockarg)
   (else // recursion
    (textblock-findparent<-textblock
     parent))))
:doc "Find a parent that accepts a child.")

(func textblock-groupby<-textblock-delim : textblock
 [textblockarg : textblock
  delimarg     : delim]
 (textblock
  :delim delimarg)
 // until (is-empty list)
 //   find from list
 //   if (< find 0)
 //     addlist list
 //   else
 //     left pos
 //     right pos
 //     addlist left
 //     list = right
:doc "Returns a textblock grouped by the given delim.")

(func textblock-parse : textblock
 [textblock : textblock]
 (collection/any<-for-until-loop : textblock
  textblock
  (fn : boolean
   [current : textblock]
   (is-empty
     (:parent current)))
  (fn : textblock
   [current : textblock]
   (textblock-parse-one current)))
 :bigospace :n^n
 :bigotime  :n^n
 :test
  (test
   (textblock
    :text "a,b,c"
    :startpos 0
    :endpos 5
    :delim
     (delim
      :startpos 0
      :delimlist
       (delimlist
        delimcomma))
    :children
     (textblocklist
      (textblock
       :text "a"
       :startpos 0
       :endpos 1)
      (textblock
       :text ","
       :startpos 1
       :endpos 2
       :delim delimcomma)
      (textblock
       :text "b"
       :startpos 2
       :endpos 3)
      (textblock
       :text ","
       :startpos 3
       :endpos 4
       :delim delimcomma)
      (textblock
       :text "c"
       :startpos 4
       :endpos 5)))
   (textblock-parse
    (textblock
     :text "a,b,c"
     :delim
      (delim
       :delimlist
        (delimlist
         delimcomma)))))
  (test
   (textblock
    :text "a<b>c"
    :startpos 0
    :endpos 5
    :delim
     (delim
      :startpos 0
      :delimlist
       (delimlist
        delimbracketangle))
    :children
     (textblocklist
      (textblock
       :text "a"
       :startpos 0
       :endpos 1)
      (textblock
       :text "<b>"
       :startpos 1
       :endpos 4
       :delim delimbracketangle
       :children
        (textblocklist
         (textblock
          :text "b"
          :startpos 2
          :endpos 3)))
      (textblock
       :text "c"
       :startpos 4
       :endpos 5)))
   (textblock-parse
    (textblock
     :text "a<b>c"
     :delim
      (delim
       :delimlist
        (delimlist
         delimbracketangle)))))
 :doc "Returns a fully parsed textblock from an initialized textblock.")

(func textblock-parse<-string-delim : textblock
 [text  : string
  delim : delim]
 (let : textblock
  [textblockinit : textblock := (textblock<-string-delim
                                 text delim)]
  (textblock-parse textblockinit))
 :doc "Returns a fully parsed textblock from a string and delim.")

(func textblock-parse-one : textblock
 [textblockin : textblock]
 (let : textblock
  [delimin     : delim     := (:delim     textblockin)
   close       : delim     := (:close     textblockin)
   startpos    : int       := (:startpos  textblockin)
   curpos      : int       := (:curpos    textblockin)
   textin      : string    := (:text      textblockin)
   parent      : textblock := (:parent    textblockin)
   starttext   : string    := (:starttext delimin)
   endtext     : string    := (:endtext   delimin)
   delimlistin : delimlist := (:delimlist delimin)
   tbchg       : textblock := (copy textblockin
                               :endpos
                                (+
                                 startpos
                                 (length<-string textin)))
   delimlistcl : delimlist := (if : delimlist
                               (is-empty close)
                               delimlistin
                               (copy delimlistin close))
   delimfirst  : delim     := (delim-first<-string-delimlist-offset
                               textin
                               delimlistcl
                               curpos)]
  (if : textblock
   (then // empty text
    (= "" textin)
    parent)
   (then // single value delim
    (and
     (!= "" starttext)
     (=  "" endtext))
    (textblock-push
     tbchg))
   (then // empty delimlist
    (is-empty delimlistcl)
    (if : textblock
     (then // no parent, return textblockin
      (= parent (empty textblock))
      tbchg)
     (else // pop parent
      (textblock-pop tbchg))))
   (then // no delim found
    (=
     delimfirst
     (empty delim))
    (textblock-delimnotfound tbchg))
   (then // delim closes current delim
    (=
     (:name delimfirst)
     (:name delimclose))
    (textblock-pop<-textblock-delim
     tbchg
     delimfirst))
   (else // delim is a new delim
    (textblock-push<-textblock-delim
     tbchg
     delimfirst))))
 :test (test
        (textblock
         :text "a"
         :endpos 1)
        (textblock-parse-one
         (textblock
          :text "a")))
       (test
        (textblock
         :text "b"
         :children
          (textblocklist
           (textblock
            :text "a"
            :endpos 1)))
        (textblock-parse-one
         (textblock
          :text "a"
          :parent
           (textblock
            :text "b"))))
       (test
        (textblock
         :text "a"
         :endpos 1
         :parent
          (textblock
           :text ",b,c"
           :startpos 1
           :curpos 1
           :delim
            (copy delimcomma
             :startpos 1
             :delimlist
              (delimlist
               delimcomma))
           :parent
            (textblock
             :text "a,b,c"
             :endpos 5
             :delim
              (delim
               :delimlist
                (delimlist
                 delimcomma)))))
        (textblock-parse-one
         (textblock
          :text "a,b,c"
          :delim
           (delim
            :delimlist
             (delimlist
              delimcomma)))))
       (test
        (textblock
         :text ",b,c"
         :startpos 1
         :curpos 1
         :delim
          (copy delimcomma
           :startpos 1
           :delimlist
            (delimlist
             delimcomma))
         :parent
          (textblock
           :text "a,b,c"
           :delim
            (delim
             :delimlist
              (delimlist
               delimcomma))
           :children
            (textblocklist
             (textblock
              :text "a"
              :endpos 1))))
        (textblock-parse-one
         (textblock
          :text "a"
          :endpos 1
          :parent
           (textblock
            :text ",b,c"
            :startpos 1
            :curpos 1
            :delim
             (copy delimcomma
              :startpos 1
              :delimlist
               (delimlist
                delimcomma))
            :parent
             (textblock
              :text "a,b,c"
              :delim
               (delim
                :delimlist
                 (delimlist
                  delimcomma)))))))
       (test
        (textblock
         :text "b,c"
         :startpos 2
         :delim
          (delim
           :delimlist
            (delimlist
             delimcomma))
         :parent
          (textblock
           :text "a,b,c"
           :delim
            (delim
             :delimlist
              (delimlist
               delimcomma))
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 0
              :endpos 1)
             (textblock
              :text ","
              :startpos 1
              :endpos 2
              :delim delimcomma))))
        (textblock-parse-one
         (textblock
          :text ",b,c"
          :startpos 1
          :curpos 1
          :delim
           (copy delimcomma
            :startpos 1
            :delimlist
             (delimlist
              delimcomma))
          :parent
           (textblock
            :text "a,b,c"
            :delim
             (delim
              :delimlist
               (delimlist
                delimcomma))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1))))))
       (test
        (textblock
         :text "b"
         :startpos 2
         :endpos 3
         :parent
          (textblock
           :text ",c"
           :startpos 3
           :curpos 1
           :delim
            (copy delimcomma
             :startpos 1
             :delimlist
              (delimlist
               delimcomma))
           :parent
            (textblock
             :text "a,b,c"
             :delim
              (delim
               :delimlist
                (delimlist
                 delimcomma))
             :children
              (textblocklist
               (textblock
                :text "a"
                :endpos 1)
               (textblock
                :text ","
                :startpos 1
                :endpos 2
                :delim
                 (copy delimcomma
                  :startpos 1
                  :endpos 2))))))
        (textblock-parse-one
         (textblock
          :text "b,c"
          :startpos 2
          :delim
           (delim
            :delimlist
             (delimlist
              delimcomma))
          :parent
           (textblock
            :text "a,b,c"
            :delim
             (delim
              :delimlist
               (delimlist
                delimcomma))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1)
              (textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (copy delimcomma
                 :startpos 1
                 :endpos 2)))))))
       (test
        (textblock
         :text "a"
         :endpos 1
         :parent
          (textblock
           :text "<b>c"
           :delim
            (copy delimbracketangle
             :startpos 1)
           :close
            (copy delimclose
             :starttext ">")
           :startpos 1
           :curpos 1
           :parent
            (textblock
             :text "a<b>c"
             :endpos 5
             :delim
              (delim
               :delimlist
                (delimlist
                 delimbracketangle)))))
        (textblock-parse-one
         (textblock
          :text "a<b>c"
          :delim
           (delim
            :delimlist
             (delimlist
              delimbracketangle)))))
       (test
        (textblock
         :text "<b>c"
         :startpos 2
         :curpos 1
         :delim
          (copy delimbracketangle
           :startpos 1)
         :close
          (copy delimclose
           :starttext ">")
         :parent
          (textblock
           :text "a<b>c"
           :delim 
            (delim
             :delimlist
              (delimlist
               delimbracketangle))
           :children
            (textblocklist
             (textblock
              :text "a"
              :endpos 1))))
        (textblock-parse-one
         (textblock
          :text "a"
          :endpos 1
          :parent
           (textblock
            :text "<b>c"
            :startpos 2
            :curpos 1
            :delim
             (copy delimbracketangle
              :startpos 1)
            :close
             (copy delimclose
              :starttext ">")
            :parent
             (textblock
              :text "a<b>c"
              :delim
               (delim
                :delimlist
                 (delimlist
                  delimbracketangle)))))))
       (test
        (textblock
         :text "c"
         :startpos 4
         :delim
          (delim
           :delimlist
            (delimlist
             delimbracketangle))
         :parent
          (textblock
           :text "a<b>c"
           :delim 
            (delim
             :delimlist
              (delimlist
               delimbracketangle))
           :children
            (textblocklist
             (textblock
              :text "a"
              :endpos 1)
             (textblock
              :text "<b>"
              :delim delimbracketangle
              :startpos 1
              :endpos 4
              :children
               (textblocklist
                (textblock
                 :text "b"
                 :startpos 2
                 :endpos 3))))))
        (textblock-parse-one
         (textblock
          :text "<b>c"
          :startpos 1
          :curpos 1
          :delim
           (copy delimbracketangle
            :startpos 1)
          :close
           (copy delimclose
            :starttext ">")
          :parent
           (textblock
            :text "a<b>c"
            :delim
             (delim
              :delimlist
               (delimlist
                delimbracketangle))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1))))))
 :doc "Returns a textblock that has been parse a single level.")

(func textblock-pop : textblock
 [textblockarg : textblock]
 (let : textblock
  [parent    : textblock := (:parent   textblockarg)
   text      : string    := (:text     textblockarg)
   startpos  : int       := (:startpos textblockarg)
   endpos    : int       := (+ startpos (length<-string text))
   delimpar  : delim     := (:delim parent)
   child     : textblock := (copy textblockarg
                             :endpos endpos
                             :delim  (empty delim)
                             :parent (empty textblock))
   parenttgt : textblock := (textblock-findparent<-textblock
                             parent)]
  (textblock-addchild<-textblock-find-child
   parent
   parenttgt
   child))
 :test (test
        (textblock
         :text "parent"
         :children
          (textblocklist
           (textblock
            :text "child"
            :endpos 5)))
        (textblock-pop
         (textblock
          :text "child"
          :parent
           (textblock
            :text "parent"))))
       (test
        (textblock
         :text "a,b,c"
         :delim
          (delim
           :delimlist
            (delimlist
             (delim
              :name "delimcomma"
              :starttext ",")))
         :children
          (textblocklist
           (textblock
            :text "a"
            :endpos 1)
           (textblock
            :text ","
            :startpos 1
            :endpos 2
            :delim
             (delim
              :name "delimcomma"
              :starttext ","
              :startpos 1
              :endpos 2))
           (textblock
            :text "b"
            :startpos 2
            :endpos 3)
           (textblock
            :text ","
            :startpos 3
            :endpos 4
            :delim
             (delim
              :name "delimcomma"
              :starttext ","
              :startpos 1
              :endpos 4))
           (textblock
            :text "c"
            :startpos 4
            :endpos 5)))
        (textblock-pop
         (textblock
          :text "c"
          :startpos 4
          :endpos 5
          :parent
           (textblock
            :text "a,b,c"
            :delim
             (delim
              :delimlist
               (delimlist
                (delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1)
              (textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 2))
              (textblock
               :text "b"
               :startpos 2
               :endpos 3)
              (textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 4)))))))
 :doc "Returns the parent of a textblock with the current textblock added to textblocklist.")

(func textblock-pop<-textblock-delim : textblock
 [textblockarg : textblock
  delimarg     : delim]
 (if : textblock
  (then // empty delim
   (is-empty delimarg)
   textblockarg)
  (then // close delim
   (=
    (:name delimarg)
    (:name delimclose))
   (let : textblock
    [parentcur : textblock := (:parent textblockarg)
     delimcur  : delim     := (:delim textblockarg)
     starttext : string    := (:starttext delimcur)
     endtext   : string    := (:endtext delimcur)
     delimpos  : int       := (:startpos delimarg)
     startpos  : int       := (:startpos textblockarg)
     startsub  : int       := (length<-string starttext)
     endpos    : int       := (+
                               delimpos
                               (length<-string endtext))
     endsub    : int       := delimpos
     textcur   : string    := (:text textblockarg)
     textout   : string    := (string<-string-start
                               textcur endpos)
     textsub   : string    := (string<-string-start-end
                               textcur
                               startsub
                               endsub)
     textdelim : string    := (string<-string-start-end
                               textcur
                               0
                               endpos)
     childchg  : textblock := (copy textblockarg
                               :text textdelim
                               :endpos (+ startpos endpos)
                               :curpos 0
                               :delim
                                (copy
                                 delimcur
                                 :startpos 0
                                 :endpos 0
                                 :delimlist (empty delimlist))
                               :close  (empty delim)
                               :parent (empty textblock)
                               :children
                                (textblocklist
                                 (textblock
                                  :text textsub
                                  :startpos (+ startpos startsub)
                                  :endpos (+ startpos endsub)
                                  :curpos 0)))
     parenttgt : textblock := (textblock-findparent<-textblock
                               parentcur)
     parentchg : textblock := (textblock-addchild<-textblock-find-child
                               parentcur
                               parenttgt
                               childchg)]
    (textblock
     :text textout
     :delim (:delim parenttgt)
     :startpos (+ startpos endpos)
     :parent parentchg)))
  (else
   (let : textblock
    [parentcur   : textblock     := (:parent textblockarg)
     childrenpar : textblocklist := (:children parentcur)
     childchg    : textblock     := (copy textblockarg
                                     :delim  delimarg
                                     :parent (empty textblock))
     childrenchg : textblocklist := (copy childrenpar
                                     childchg)]
    (copy parentcur
     :children childrenchg))))
 :test (test
        (textblock
         :text "parent"
         :children
          (textblocklist
           (textblock
            :text "child"
            :delim delimcomma)))
        (textblock-pop<-textblock-delim
         (textblock
          :text "child"
          :parent
           (textblock
            :text "parent"))
          delimcomma))
       (test
        (textblock
         :text "c"
         :startpos 4
         :delim
          (delim
           :delimlist
            (delimlist
             delimbracketangle))
         :parent
          (textblock
           :text "a<b>c"
           :delim
            (delim
             :delimlist
              (delimlist
               delimbracketangle))
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 0
              :endpos 1)
             (textblock
              :text "<b>"
              :startpos 1
              :endpos 4
              :delim delimbracketangle
              :children
               (textblocklist
                (textblock
                 :text "b"
                 :startpos 2
                 :endpos 3))))))
        (textblock-pop<-textblock-delim
         (textblock
          :text "<b>c"
          :startpos 1
          :curpos 1
          :delim
           (copy delimbracketangle
            :startpos 1)
          :close
           (copy delimclose
            :starttext ">")
          :parent
           (textblock
            :text "a<b>c"
            :delim
             (delim
              :delimlist
               (delimlist
                delimbracketangle))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1))))
         (copy delimclose
          :starttext ">"
          :startpos 2)))
 :doc "Returns the parent of a textblock with the current textblock added to textblocklist.")

(func textblock-push : textblock
 [textblockin : textblock]
 (let : textblock
  [text       : string    := (:text textblockin)
   delimcur   : delim     := (:delim textblockin)
   offset     : int       := (:startpos textblockin)
   starttext  : string    := (:starttext delimcur)
   endtext    : string    := (:endtext delimcur)
   startlen   : int       := (length<-string starttext)
   issingle   : boolean   := (and
                              (!= "" starttext)
                              (=  "" endtext))
   delimsplit : delim     := (if : delim
                              issingle
                              (copy delimcur
                               :startpos startlen
                               :delimlist
                                (empty delimlist))
                              delimcur)
   delimchg   : delim     := (if : delim
                              issingle
                              (copy delimsplit
                               :startpos 0)
                              delimsplit)
   tbleft     : textblock := (textblock-startleft<-string-delim-offset
                              text delimsplit offset)
   tbright    : textblock := (textblock-startright<-string-delim-offset
                              text delimsplit offset)
   tbchg      : textblock := (copy tbleft
                              :delim delimchg)
   parent     : textblock := (:parent textblockin)
   parenttgt  : textblock := (textblock-findparent<-textblock
                              parent)
   parentchg  : textblock := (textblock-addchild<-textblock-find-child
                              parent
                              parenttgt
                              tbchg)
   delimright : delim     := (if : delim
                              issingle
                              (delim
                               :delimlist
                                (:delimlist delimcur))
                              (empty delim))]
  (copy tbright
   :curpos 0
   :delim  delimright
   :parent parentchg))
 :test (test
        (textblock
         :text "b,c"
         :startpos 2
         :delim
          (delim
           :delimlist
            (delimlist
             (copy delimcomma
              :delimlist
               (delimlist
                delimbracketangle))))
         :parent
          (textblock
           :text "a,b,c"
           :delim
            (delim
             :delimlist
              (delimlist
               (copy delimcomma
                :delimlist
                 (delimlist
                  delimbracketangle))))
           :children
            (textblocklist
             (textblock
              :text "a"
              :startpos 0
              :endpos 1)
             (textblock
              :text ","
              :startpos 1
              :endpos 2
              :delim delimcomma))))
        (textblock-push
         (textblock
          :text ",b,c"
          :startpos 1
          :curpos 1
          :delim
           (copy delimcomma
            :delimlist
             (delimlist
              (copy delimcomma
               :delimlist
                (delimlist
                 delimbracketangle))))
          :parent
           (textblock
            :text "a,b,c"
            :delim
             (delim
              :delimlist
               (delimlist
                (copy delimcomma
                 :delimlist
                  (delimlist
                   delimbracketangle))))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1))))))
       (test
        (textblock
         :text `"b"
1,"2"`
         :startpos 4
         :delim
          (delim
           :delimlist
            (delimlist
             delimline
             delimquote
             delimcomma))
         :parent
          (textblock
           :text `"a","b"
1,"2"`
           :endpos 13
           :delim
            (delim
             :name "delimcsv"
             :delimlist
              (delimlist
               delimline
               delimquote
               delimcomma))
         :children
          (textblocklist
           (textblock
            :text `"a"`
            :endpos 3
            :delim
             (copy delimquote
              :endpos 2)
            :children
             (textblocklist
              (textblock
               :text "a"
               :startpos 1
               :endpos 2)))
           (textblock
            :text ","
            :startpos 3
            :endpos 4           
            :delim
             delimcomma
              ))))
        (textblock-push
         (textblock
          :text `,"b"
1,"2"`
           :startpos 3
           :curpos 1
           :delim
            (copy delimcomma
             :delimlist
              (delimlist
               delimline
               delimquote
               delimcomma))
           :parent
            (textblock
             :text `"a","b"
1,"2"`
             :endpos 13
             :delim
              (delim
               :name "delimcsv"
               :delimlist
                (delimlist
                 delimline
                 delimquote
                 delimcomma))
             :children
              (textblocklist
               (textblock
                :text "\"a\""
                :endpos 3
                :delim
                 (copy delimquote
                  :endpos 2)
                :children
                 (textblocklist
                  (textblock
                   :text "a"
                   :startpos 1
                   :endpos 2))))))))
:doc "Returns a a textblock using the textblocks current delim.")

(func textblock-push<-textblock-delim : textblock
 [textblockin : textblock
  delimin     : delim]
 (if : textblock
  (then (is-empty delimin)
   (textblock-push
    textblockin))
  (else
   (let : textblock
    [text      : string    := (:text      textblockin)
     offset    : int       := (:startpos  textblockin)
     delimcur  : delim     := (:delim     textblockin)
     parent    : textblock := (:parent    textblockin)
     startpos  : int       := (:startpos  delimin)
     starttext : string    := (:starttext delimin)
     endtext   : string    := (:endtext   delimin)
     issingle  : boolean   := (and
                               (!= "" starttext)
                               (=  "" endtext))
     tbleft   : textblock := (textblock-startleft<-string-delim-offset
                              text delimin offset)
     delimsr  : delimlist := (:delimlist delimcur)
     delimr   : delim     := (if : delim
                              issingle
                              (copy delimin
                               :delimlist delimsr)
                              delimin)
     tbright  : textblock := (textblock-startright<-string-delim-offset
                              text delimr offset)
     tbparent : textblock := (copy tbright
                              :parent
                               (if : textblock
                                (is-empty parent)
                                textblockin
                                parent))
     delims   : delimlist := (:delimlist delimin)
     delimchg : delim     := (if : delim
                              (is-empty delims)
                              (empty delim)
                              (delim
                               :delimlist delims))]
    (if : textblock
     (then (= 0 startpos)
      tbparent)
     (else
      (copy tbleft
       :delim delimchg
       :parent tbparent))))))
 :test (test
        (textblock
         :text "a"
         :delim
          (delim
           :delimlist
            (delimlist
             delimbracketangle))
         :endpos 1
         :parent
          (textblock
           :text ",b,c"
           :startpos 1
           :curpos 1
           :delim
            (copy delimcomma
             :startpos 1
             :delimlist
              (delimlist
               (copy delimcomma
                :delimlist
                 (delimlist
                  delimbracketangle))))
           :parent
            (textblock
             :text "a,b,c"
             :delim
              (delim
               :delimlist
                (delimlist
                 (copy delimcomma
                  :delimlist
                   (delimlist
                    delimbracketangle)))))))
        (textblock-push<-textblock-delim
         (textblock
          :text "a,b,c"
          :delim
           (delim
            :delimlist
             (delimlist
              (copy delimcomma
               :delimlist
                (delimlist
                 delimbracketangle)))))
         (copy delimcomma
          :startpos 1
          :delimlist
           (delimlist
            delimbracketangle))))
       (test
        (textblock
         :text "b"
         :startpos 2
         :endpos 3
         :delim
          (delim
           :delimlist
            (delimlist
             delimbracketangle))
         :parent
          (textblock
           :text ",c"
           :startpos 3
           :curpos 1
           :delim
            (copy delimcomma
             :startpos 1
             :delimlist
              (delimlist
               (copy delimcomma
                :delimlist
                 (delimlist
                  delimbracketangle))))
           :parent
            (textblock
             :text "a,b,c"
             :delim
              (delim
               :delimlist
                (delimlist
                 (copy delimcomma
                  :delimlist
                   (delimlist
                    delimbracketangle))))
             :children
              (textblocklist
               (textblock
                :text "a"
                :endpos 1)
               (textblock
                :text ","
                :startpos 1
                :endpos 2
                :delim
                 (copy delimcomma
                  :startpos 1
                  :endpos 2))))))
        (textblock-push<-textblock-delim
         (textblock
          :text "b,c"
          :startpos 2
          :delim
           (delim
            :delimlist
             (delimlist
              (copy delimcomma
               :delimlist
                (delimlist
                 (delim
                  :name "delimbracketangle"
                  :starttext "<"
                  :endtext ">")))))
          :parent
           (textblock
            :text "a,b,c"
            :delim
             (delim
              :delimlist
               (delimlist
                (copy delimcomma
                 :delimlist
                  (delimlist
                   delimbracketangle))))
            :children
             (textblocklist
              (textblock
               :text "a"
               :endpos 1)
              (textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (copy delimcomma
                 :startpos 1
                 :endpos 2)))))
         (copy delimcomma
          :startpos 1
          :delimlist
           (delimlist
            delimbracketangle))))
 :doc "Returns the parent of a textblock with the current textblock added to textblocklist.")

(func textblock-startleft<-string-delim-offset : textblock
 [text   : string
  delim  : delim
  offset : int]
 (let
  [startpos : int := (:startpos delim)]
  (if
   (then (= text "")    (empty textblock))
   (then (< startpos 0) (empty textblock))
   (else
    (textblock
     :text (string<-string-start-end text 0 startpos)
     :startpos offset
     :endpos (+ offset startpos)
     :curpos 0))))
 :test (test
        (textblock
         :text "a"
         :startpos 0
         :endpos 1)
        (textblock-startleft<-string-delim-offset
         "a,b"
         (delim
          :startpos 1)
         0))
 :doc "Returns a textblock constructed from the text before the current delimiter start.")

(func textblock-startright<-string-delim-offset : textblock
 [text    : string
  delimin : delim
  offset  : int]
 (let
  [startpos   : int       := (:startpos delimin)
   starttext  : string    := (:starttext delimin)
   endtext    : string    := (:endtext delimin)
   delimlist  : delimlist := (:delimlist delimin)
   close      : delim     := (if : delim
                              (then (= endtext "") (empty delim))
                              (else
                               (copy delimclose
                                :starttext endtext)))
   delimlen   : int       := (length<-string starttext)
   curpos     : int       := delimlen]
  (if
   (then (= text "")    (empty textblock))
   (then (< startpos 0) (empty textblock))
   (else
    (textblock
     :text
      (string<-string-start text startpos)
     :startpos
      (+ offset startpos)
     :curpos curpos
     :delim delimin
     :close close))))
 :test (test
        (textblock
         :text ",b"
         :startpos 1
         :curpos 1
         :delim
          (delim
           :starttext ","
           :startpos  1))
        (textblock-startright<-string-delim-offset
         "a,b"
         (delim
          :starttext ","
          :startpos  1)
         0))
       (test
        (textblock
         :text "<b>c"
         :startpos 1
         :curpos 1
         :delim
          (copy delimbracketangle
           :startpos 1
           :delimlist
            (delimlist
             delimbracketcurly))
         :close
          (copy delimclose
           :starttext ">"))
        (textblock-startright<-string-delim-offset
         "a<b>c"
         (copy delimbracketangle
          :startpos 1
          :delimlist
           (delimlist
            delimbracketcurly))
         0))
 :doc "Returns a textblock constructed from the text after the current delimiter start.")
