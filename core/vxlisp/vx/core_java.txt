  public static interface Type_replfunc {
    public Core.Type_any vx_repl(Core.Type_anylist arglist);
  }

  public static interface Type_replfunc_async {
    public CompletableFuture<Core.Type_any> vx_repl(Core.Type_anylist arglist);
  }

  public static List<Core.Type_any> emptylistany = Core.immutablelist(new ArrayList<Core.Type_any>());

  public static Map<String, Core.Type_any> emptymapany = Core.immutablemap(new LinkedHashMap<String, Core.Type_any>());

  public static <T> List<T> immutablelist(List<T> listany) {
    return Collections.unmodifiableList(listany);
  }

  public static <T> Map<String, T> immutablemap(Map<String, T> mapany) {
    return Collections.unmodifiableMap(mapany);
  }

  public static class Class_base {
    protected int vx_iref = 0;
    protected Core.Type_msgblock vxmsgblock = null;
    public List<Type_any> vx_dispose() {
      this.vx_iref = 0;
      this.vxmsgblock = null;
      return emptylistany;
    }
    public Core.Type_msgblock vx_msgblock() {return vxmsgblock;}
    public boolean vx_release() {
      boolean output = false;
      if (this.vx_iref < 0) {
      } else if (vx_iref == 0) {
        vx_iref = -1;
        output = true;
      } else {
        vx_iref -= 1;
      }
      return output;
    }
    public void vx_reserve() {this.vx_iref += 1;}
  }

  public static class KeyValue<T> {
    public String key = "";
    public T value = null;
  }

  public static Core.Type_constdef constdef_new(
    String pkgname,
    String name,
    Core.Type_any typ
  ) {
    Core.Class_constdef output = new Core.Class_constdef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_type = typ;
    return output;
  }

  public static Core.Type_funcdef funcdef_new(
    String pkgname,
    String name,
    int idx,
    boolean async,
    Core.Type_any typ
  ) {
    Core.Class_funcdef output = new Core.Class_funcdef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_idx = Core.vx_new_int(idx);
    output.vx_p_async = Core.vx_new_boolean(async);
    output.vx_p_type = typ;
    return output;
  }

  public static Core.Type_any[] arrayany_from_anylist(final Core.Type_anylist list) {
    return list.vx_list().toArray(new Core.Type_any[0]);
  }

  @SafeVarargs
  public static <T> List<T> arraylist_from_array(final T... items) {
    List<T> output = new ArrayList<T>(Arrays.asList(items));
    output = Core.immutablelist(output);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> List<T> arraylist_from_arraylist(final T generic_any_1, final List<U> listval) {
    List<T> output = new ArrayList<>();
    for (Core.Type_any value : listval) {
      T t_val = Core.f_any_from_any(generic_any_1, value);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T, U> List<T> arraylist_from_arraylist_fn(final List<U> listval, final Function<U, T> fn_any_from_any) {
    List<T> output = new ArrayList<>();
    for (U value_u : listval) {
      T t_val = fn_any_from_any.apply(value_u);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> List<T> arraylist_from_linkedhashmap(final T generic_any_1, final Map<String, U> mapval) {
    List<T> output = new ArrayList<T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      U u_val = mapval.get(key);
      T t_val = Core.f_any_from_any(generic_any_1, u_val);
      output.add(t_val);
    }
    output = Core.immutablelist(output);
    return output;
  }

  public static <T, U> List<T> arraylist_from_linkedhashmap_fn(final Map<String, U> mapval, final BiFunction<String, U, T> fn_any_from_key_value) {
    List<T> output = new ArrayList<T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      U u_val = mapval.get(key);
      T t_val = fn_any_from_key_value.apply(key, u_val);
      output.add(t_val);
    }
    return output;
  }

  public static <T> CompletableFuture<T> async_new_completed(final T val) {
    CompletableFuture<T> output = CompletableFuture.completedFuture(val);
    return output;
  }

  public static <T extends Core.Type_any, U extends Core.Type_any> CompletableFuture<T> async_from_async(T generic_any_1, final CompletableFuture<U> future) {
    CompletableFuture<T> output = future.thenApply(val -> {
      return Core.f_any_from_any(generic_any_1, val);
    });
    return output;
  }

  public static <T, U> CompletableFuture<T> async_from_async_fn(final CompletableFuture<U> future, final Function<? super U, ? extends T> fn) {
    CompletableFuture<T> output = future.thenApply(fn);
    return output;
  }

  public static <T> CompletableFuture<List<T>> async_arraylist_from_arraylist_async(final List<CompletableFuture<T>> list_future) {
    CompletableFuture<Void> allFutures = CompletableFuture.allOf(
      list_future.toArray(new CompletableFuture[list_future.size()])
    );
    CompletableFuture<List<T>> output = allFutures.thenApply(v -> {
      List<T> list = list_future.stream()
        .map(future -> future.join())
        .collect(Collectors.toList());
      return Core.immutablelist(list);
    });
    return output;
  }

  @SafeVarargs
  public static <T> LinkedHashMap<String, T> hashmap_from_keyvalues(final KeyValue<T>... keyvalues) {
    LinkedHashMap<String, T> output = new LinkedHashMap<String, T>();
    for (KeyValue<T> keyvalue : keyvalues) {
      String key = keyvalue.key;
      T value = keyvalue.value;
      output.put(key, value);
    }
    return output;
  }

  public static <T> KeyValue<T> keyvalue_from_key_value(final String key, final T value) {
    KeyValue<T> output = new KeyValue<T>();
    output.key = key;
    output.value = value;
    return output;
  }

  public static <T> Map<String, T> map_from_list_fn(final List<T> listval, final Function<T, Core.Type_string> fn_any_from_any) {
    Map<String, T> output = new LinkedHashMap<>();
    for (T val : listval) {
      Core.Type_string valkey = fn_any_from_any.apply(val);
      String key = valkey.vx_string();
      output.put(key, val);
    }
    return output;
  }

  public static <T extends Core.Type_any> LinkedHashMap<String, T> map_from_map(final LinkedHashMap<String, Core.Type_any> mapval) {
    LinkedHashMap<String, T> output = new LinkedHashMap<String, T>();
    Set<String> keys = mapval.keySet();
    for (String key : keys) {
      Core.Type_any value = mapval.get(key);
      try {
        @SuppressWarnings("unchecked")
        T castval = (T)value;
        output.put(key, castval);
      } catch (Exception ex) {
        Core.vx_log("map<-map", ex);
      }
    }
    return output;
  }

  // vx_float_from_string(string)
  public static float vx_float_from_string(String text) {
    float output = 0;
    try {
      output = Float.parseFloat(text);
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_int_from_string(string)
  public static int vx_int_from_string(String text) {
    int output = 0;
    try {
      output = Integer.parseInt(text);
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_is_float(string)
  public static boolean vx_is_float(String text) {
    boolean output = false;
    try {
      Float.parseFloat(text);
      output = true;
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_is_int(string)
  public static boolean vx_is_int(String text) {
    boolean output = false;
    try {
      Integer.parseInt(text);
      output = true;
    } catch (Exception e) {
    }    
    return output;
  }

  // vx_is_int(any)
  public static boolean vx_is_int(Core.Type_any value) {
    boolean result = false;
    if (value == Core.c_infinity) {
      result = true;
    } else if (value == Core.c_neginfinity) {
      result = true;
    } else if (value == Core.c_notanumber) {
      result = true;
    } else if (value instanceof Core.Type_int) {
      result = true;
    } else if (value instanceof Core.Type_float) {
      Core.Type_float valfloat = (Core.Type_float)value;
      float floatval = valfloat.vx_float();
      if ((int)floatval == floatval) {
        result = true;
      }
    } else if (value instanceof Core.Type_decimal) {
      Core.Type_decimal valdec = (Core.Type_decimal)value;
      String strval = valdec.vx_string();
      try {
        if (Integer.parseInt(strval) == Float.parseFloat(strval)) {
          result = true;
        }
      } catch (Exception ex) {
      }
    } else if (value instanceof Core.Type_string) {
      Core.Type_string valstr = (Core.Type_string)value;
      String strval = valstr.vx_string();
      result = vx_is_int(strval);
    }
    return result;
  }

  // vx_log(object...)
  public static void vx_log(Object... values) {
    for (Object value : values) {
      String text = "";
      if (value == null) {
        text = "null";
      } else if (value instanceof Core.Type_any) {
        Core.Type_any val_any = (Core.Type_any)value;
        Core.Type_string valstring = Core.f_string_from_any(val_any);
        text = valstring.vx_string();
      } else {
        text = value.toString();
      }
      System.out.println(text);
    }
  }

  // vx_msg_error
  public static Type_msg vx_msg_error(final String text) {
    Class_msg output = new Class_msg();
    output.vx_p_text = Core.vx_new_string(text);
    output.vx_p_severity = Core.c_msg_severe;
    return output;
  }

  // vx_msg_from_exception
  public static Type_msg vx_msg_from_exception(final String text, final Exception err) {
    Class_msg output = new Class_msg();
    output.vx_p_text = Core.vx_new_string(text);
    output.vx_p_severity = Core.c_msg_severe;
    output.err = err;
    Core.vx_log(output);
    return output;
  }

  public static Type_boolean vx_new_boolean(final boolean isval) {
    Type_boolean output = Core.c_false;
    if (isval) {
      output = Core.c_true;
    }
    return output;
  }

  public static Type_float vx_new_float(final float fval) {
    Class_float output = new Core.Class_float();
    output.vxfloat = fval;
    return output;
  }

  public static Type_int vx_new_int(final int ival) {
    Class_int output = new Core.Class_int();
    output.vxint = ival;
    return output;
  }

  public static Type_string vx_new_string(final String text) {
    Type_string output;
    if (text == "" && Core.e_string != null) {
      output = Core.e_string;
    } else {
      Class_string work = new Core.Class_string();
      work.vxstring = text;
      output = work;
    }
    return output;
  }

  public static String vx_string_from_any(Core.Type_any value) {
    return vx_string_from_any_indent(value, 0, false);
  }

  public static String vx_string_from_any_indent(Core.Type_any value, int indent, boolean linefeed) {
    String indenttext = " ".repeat(indent);
    String output = "";
    if (indent > 50) {
      output = "Error: Max Depth Exceeded";
    } else if (value == null) {
      output = "null";
    } else if (value == value.vx_type()) {
      if (value instanceof Core.Type_func) {
        Core.Type_func valuefunc = (Core.Type_func)value;
        Core.Type_funcdef funcdef = valuefunc.vx_funcdef();
        output = funcdef.pkgname().vx_string() + "/" + funcdef.name().vx_string();
      } else {
        Core.Type_typedef typedef = value.vx_typedef();
        output = typedef.pkgname().vx_string() + "/" + typedef.name().vx_string();
      }
    } else if (value instanceof Core.Type_boolean) {
      Core.Type_boolean valbool = Core.f_any_from_any(Core.t_boolean, value);
      if (valbool.vx_boolean() == true) {
        output = "true";
      } else {
        output = "false";
      }
    } else if (value instanceof Core.Type_decimal) {
      Core.Type_decimal valdec = Core.f_any_from_any(Core.t_decimal, value);
      output = valdec.vx_string();
    } else if (value instanceof Core.Type_float) {
      Core.Type_float valfloat = Core.f_any_from_any(Core.t_float, value);
      output = Float.toString(valfloat.vx_float());
      if (output.endsWith(".0")) {
        output = output.substring(0, output.length() - 2);
      }
    } else if (value instanceof Core.Type_int) {
      if (value == Core.c_notanumber) {
        output = "notanumber";
      } else if (value == Core.c_infinity) {
        output = "infinity";
      } else if (value == Core.c_neginfinity) {
        output = "neginfinity";
      } else {
        Core.Type_int valint = Core.f_any_from_any(Core.t_int, value);
        output = Integer.toString(valint.vx_int());
      }
    } else if (value instanceof Core.Type_string) {
      Core.Type_string valstring = Core.f_any_from_any(Core.t_string, value);
      output = "\"" + valstring.vx_string() + "\"";
    } else if (value instanceof Core.Type_list) {
      Core.Type_list vallist = Core.f_any_from_any(Core.t_list, value);
      Core.Type_typedef typedef = vallist.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      int indentint = indent;
      indentint += 1;
      List<Core.Type_any> listval = vallist.vx_list();
      for (Core.Type_any valsub : listval) {
        String valtext = Core.vx_string_from_any_indent(valsub, indentint, linefeed);
        output += "\n " + indenttext + valtext;
      }
      if (vallist.vx_msgblock() != null) {
        String msgtext = Core.vx_string_from_any_indent(vallist.vx_msgblock(), indentint, linefeed);
        output += "\n" + indenttext + " :msgblock\n  " + indenttext + msgtext;
      }
      output = "(" + typedefname.vx_string() + output + ")";
    } else if (value instanceof Core.Type_map) {
      Core.Type_map valmap = Core.f_any_from_any(Core.t_map, value);
      Core.Type_typedef typedef = valmap.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      int indentint = indent;
      indentint += 2;
      Map<String, Core.Type_any> mapval = valmap.vx_map();
      Set<String> keys = mapval.keySet();
      for (String key : keys) {
        Core.Type_any valsub = mapval.get(key);
        if (!key.startsWith(":")) {
          key = ":" + key;
        }
        String strval = Core.vx_string_from_any_indent(valsub, indentint, linefeed);
        if (strval.contains("\n")) {
          strval = "\n  " + indenttext + strval;
        } else {
          strval = " " + strval;
        }
        output += "\n" + indenttext + " " + key + strval;
      }
      if (valmap.vx_msgblock() != null) {
        String msgtext = Core.vx_string_from_any_indent(valmap.vx_msgblock(), indentint, linefeed);
        output += "\n" + indenttext + " :msgblock\n  " + indenttext + msgtext;
      }
      output = "(" + typedefname.vx_string() + output + ")";
    } else if (value instanceof Core.Type_struct) {
      Core.Type_struct valstruct = Core.f_any_from_any(Core.t_struct, value);
      Core.Type_typedef typedef = valstruct.vx_typedef();
      Core.Type_string typedefname = typedef.name();
      Core.Type_map valmap = Core.t_map.vx_new_from_map(valstruct.vx_map());
      String valtext = Core.vx_string_from_any_indent(valmap, indent, linefeed);
      output = valtext.replaceFirst("map", typedefname.vx_string());
    } else if (value instanceof Core.Type_func) {
      Core.Type_func valfunc = Core.f_any_from_any(Core.t_func, value);
      Core.Type_funcdef funcdef = valfunc.vx_funcdef();
      Core.Type_string funcdefname = Core.f_funcname_from_funcdef(funcdef);
      output = funcdefname.vx_string();
      if (valfunc.vx_msgblock() != null) {
        String msgtext = Core.vx_string_from_any_indent(valfunc.vx_msgblock(), indent, linefeed);
        output += "\n" + indenttext + " :msgblock\n  " + indenttext + msgtext;
      }
      output = "(" + output + ")";
    }
    return output;
  }

  public static String vx_string_from_string_start_end(String text, int start, int end) {
    String output = "";
    int len = text.length();
    if (start >= len) {
      output = "";
    } else if (end <= start) {
      output = "";
    } else if (end >= len) {
      output = text.substring(start, len);
    } else {
      output = text.substring(start, end);
    }
    return output;   
  }

  public static Core.Type_typedef typedef_new(
    String pkgname,
    String name,
    String extend,
    Core.Type_typelist traits,
    Core.Type_typelist allowtypes,
    Core.Type_typelist disallowtypes,
    Core.Type_funclist allowfuncs,
    Core.Type_funclist disallowfuncs,
    Core.Type_anylist allowvalues,
    Core.Type_anylist disallowvalues,
    Core.Type_argmap properties
  ) {
    Core.Class_typedef output = new Core.Class_typedef();
    output.vx_p_pkgname = Core.vx_new_string(pkgname);
    output.vx_p_name = Core.vx_new_string(name);
    output.vx_p_extend = Core.vx_new_string(extend);
    output.vx_p_traits = traits;
    output.vx_p_allowtypes = allowtypes;
    output.vx_p_disallowtypes = disallowtypes;
    output.vx_p_allowfuncs = disallowfuncs;
    output.vx_p_disallowfuncs = disallowfuncs;
    output.vx_p_allowvalues = disallowvalues;
    output.vx_p_disallowvalues = disallowvalues;
    output.vx_p_properties = properties;
    return output;
  }

  public static Core.Type_anylist vx_anylist_from_arraystring(String[] arraystring) {
    List<Object> listany = new ArrayList<>();
    for (String svalue : arraystring) {
      Core.Type_string value = Core.vx_new_string(svalue);
      listany.add(value);
    }
    Object[] arrayany = listany.toArray();
    Core.Type_anylist output = Core.t_anylist.vx_new(arrayany);
    return output;
  }

  // Warning!: Blocking
  public static <T extends Core.Type_any> T vx_sync_from_async(final T generic_any_1, final CompletableFuture<T> future) {
    T output = Core.f_empty(generic_any_1);
    try {
      output = future.get();
    } catch (Exception e) {
      Core.Type_msg msg = Core.vx_msg_from_exception("sync<-async", e);
      Core.Type_any val = generic_any_1.vx_new(msg);
      output = Core.f_any_from_any(generic_any_1, val);
    }
    return output;
  }
