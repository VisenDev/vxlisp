  public static <T extends Core.Type_any> T vx_any_from_for_until_loop_max(T generic_any_1, T start, Core.Func_boolean_from_any fn_until, Core.Func_any_from_any fn_loop, Core.Type_int max) {
    T output = start;
    boolean iscontinue = true;
    int icount = 0;
    int imax = max.vx_int();
    while (iscontinue) {
      if (icount >= imax) {
        String path = "vx/collection/any<-for-until-loop-max";
        String code = ":loopmaximumexceeded";
        Core.Type_int details = Core.vx_new_int(icount);
        Core.Type_msg msg = Core.vx_msg_from_error(path, code, details);
        output = Core.vx_copy(output, msg);
        iscontinue = false;
      } else {
        icount += 1;
        output = fn_loop.vx_any_from_any(generic_any_1, output);
        Core.Type_boolean valcontinue = fn_until.vx_boolean_from_any(output);
        iscontinue = !valcontinue.vx_boolean();
      }
    }
    return output;
  }

  public static <T extends Core.Type_any> T vx_any_from_for_while_loop_max(T generic_any_1, T start, Core.Func_boolean_from_any fn_while, Core.Func_any_from_any fn_loop, Core.Type_int max) {
    T output = start;
    boolean iscontinue = true;
    int icount = 0;
    int imax = max.vx_int();
    while (iscontinue) {
      if (icount >= imax) {
        String path = "vx/collection/any<-for-while-loop-max";
        String code = ":loopmaximumexceeded";
        Core.Type_int details = Core.vx_new_int(icount);
        Core.Type_msg msg = Core.vx_msg_from_error(path, code, details);
        output = Core.vx_copy(output, msg);
        iscontinue = false;
      } else {
        icount += 1;
        Core.Type_boolean valcontinue = fn_while.vx_boolean_from_any(output);
        iscontinue = valcontinue.vx_boolean();
        if (iscontinue) {
          output = fn_loop.vx_any_from_any(generic_any_1, output);
        }
      }
    }
    return output;
  }

  public static <T extends Core.Type_list> T vx_list_from_for_end_loop(T generic_list_1, Core.Type_int start, Core.Type_int end, Core.Func_any_from_int fn_loop) {
    T output = Core.f_empty(generic_list_1);
    List<Core.Type_any> listvals = new ArrayList<>();
    int istart = start.vx_int();
    int iend = end.vx_int();
    if (istart <= iend) {
      for (int i = istart; i <= iend; i++) {
        Core.Type_any val = fn_loop.vx_any_from_int(Core.t_any, Core.vx_new_int(i));
        listvals.add(val);
      }
    } else {
      for (int i = istart; i >= iend; i--) {
        Core.Type_any val = fn_loop.vx_any_from_int(Core.t_any, Core.vx_new_int(i));
        listvals.add(val);
      }
    }
    if (listvals.size() > 0) {
      Core.Type_anylist anylist = Core.t_anylist.vx_new(listvals);
      output = Core.f_new(generic_list_1, anylist);
    }
    return output;
  }

  public static <T extends Core.Type_list> T vx_list_from_for_while_loop_max(T generic_list_1, Core.Type_any start, Core.Func_boolean_from_any fn_while, Core.Func_any_from_any fn_loop, Core.Type_int max) {
    T output = Core.f_empty(generic_list_1);
    List<Core.Type_any> listvals = new ArrayList<>();
    boolean iscontinue = true;
    int icount = 0;
    int imax = max.vx_int();
    Core.Type_any work = start;
    while (iscontinue) {
      if (icount >= imax) {
        String path = "vx/collection/list<-for-until-loop-max";
        String code = ":loopmaximumexceeded";
        Core.Type_int details = Core.vx_new_int(icount);
        Core.Type_msg msg = Core.vx_msg_from_error(path, code, details);
        output = Core.vx_copy(output, msg);
        iscontinue = false;
      } else {
        Core.Type_boolean valwhile = fn_while.vx_boolean_from_any(work);
        iscontinue = !valwhile.vx_boolean();
        if (iscontinue) {
          icount += 1;
          work = fn_loop.vx_any_from_any(Core.t_any, work);
          listvals.add(work);
        }
      }
    }
    if (listvals.size() > 0) {
      Core.Type_anylist anylist = Core.t_anylist.vx_new(listvals);
      output = Core.f_new(generic_list_1, anylist);
    }
    return output;
  }

  public static <T extends Core.Type_list> T vx_list_from_list_filter(T generic_list_1, Core.Type_list vallist, Core.Func_any_from_any fn_filter) {
    T output = Core.f_empty(generic_list_1);
    List<Core.Type_any> listval = vallist.vx_list();
    List<Core.Type_any> items = new ArrayList<>();
    for (Core.Type_any val : listval) {
      Core.Type_any newval = fn_filter.vx_any_from_any(Core.t_any, val);
      Core.Type_boolean isempty = Core.f_is_empty_1(newval);
      if (!isempty.vx_boolean()) {
        items.add(newval);
      }
    }
    Core.Type_any work = generic_list_1.vx_new(items);
    output = Core.f_any_from_any(generic_list_1, work);
    return output;
  }

  public static <T extends Core.Type_list> T vx_list_from_list_start_end(T generic_list_1, Core.Type_list values, Core.Type_int start, Core.Type_int end) {
    T output = Core.f_empty(generic_list_1);
    int istart = start.vx_int();
    int iend = end.vx_int();
    List<Core.Type_any> listval = values.vx_list();
    int maxlen = listval.size();
    if (iend < 0) {
     iend += maxlen;
    }
    if (istart < 1) {
    } else if (istart > iend) {
    } else if (istart > maxlen) {
    } else {
      if (iend >= maxlen) {
        iend = maxlen;
      }
      List<Core.Type_any> listsub = listval.subList(istart - 1, iend);
      Core.Type_any work = generic_list_1.vx_new(listsub);
      output = Core.f_any_from_any(generic_list_1, work);
    }
    return output;
  }
  