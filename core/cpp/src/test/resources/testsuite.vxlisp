(vx/test/testpackagelist
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "any<-for-until-loop"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 8
 (any<-for-until-loop
  1
  (fn : boolean
   [current : int]
   (> current 6))
  (fn : int
   [current : int]
   (+ current current))))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 8
          :actual 8))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "any<-for-while-loop"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 8
 (any<-for-while-loop
  1
  (fn : boolean
   [current : int]
   (< current 5))
  (fn : int
   [current : int]
   (+ current current))))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 8
          :actual 8))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "is-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-list (empty stringlist)))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "is-map"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-map (empty stringmap)))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-for-end-loop"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (intlist 4 9)
 (list<-for-end-loop : intlist
  2
  3
  (fn
   [current : int]
   (* current current))))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (intlist
            4
            9)
          :actual
           (intlist
            4
            9)))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-end"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a\" \"b\" \"c\")
 (list<-list-end
  (stringlist \"a\" \"b\" \"c\" \"d\")
  3))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-filtertypes"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (list \"a\" 1 \"b\" \"c\")
 (list<-list-filtertypes : list
  (list \"a\" 1 \"b\" \"c\" 4.5)
  string int))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (list
            "a"
            1
            "b"
            "c")
          :actual
           (list
            "a"
            1
            "b"
            "c")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-fn-filter"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a1\" \"b1\" \"c1\" \"d1\")
 (list<-list-fn-filter : stringlist
  (list \"a\" 4 \"b\" (list) \"c\" (map) \"d\")
  (fn : string
   [val : any]
   (if
    (then
     (is-string val)
     (string val \"1\"))))))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")
          :actual
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"b\" \"c\" \"d\")
 (list<-list-start
  (stringlist \"a\" \"b\" \"c\" \"d\")
  1))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c"
            "d")
          :actual
           (stringlist
            "b"
            "c"
            "d")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start-end"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"b\" \"c\")
 (list<-list-start-end
  (stringlist \"a\" \"b\" \"c\" \"d\")
  1 3))"
        :testpkg "vx/collection"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c")
          :actual
           (stringlist
            "b"
            "c"))))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :any<-for-until-loop 1
      :any<-for-until-loop-max 0
      :any<-for-while-loop 1
      :any<-for-while-loop-max 0
      :is-list 1
      :is-map 1
      :list<-for-end-loop 1
      :list<-for-while-loop 0
      :list<-for-while-loop-max 0
      :list<-list-end 1
      :list<-list-filtertypes 1
      :list<-list-fn-filter 1
      :list<-list-start 1
      :list<-list-start-end 1)
    :testpkg "vx/collection")
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 14)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 14)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 14
      :total 14)
    :funcnums
     (vx/test/testcoveragenums
      :pct 71
      :tests 10
      :total 14)
    :testpkg "vx/collection"
    :totalnums
     (vx/test/testcoveragenums
      :pct 71
      :tests 10
      :total 14)
    :typenums
     (vx/test/testcoveragenums
      :pct 100))
  :passfail true
  :testpkg "vx/collection")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "boolean"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true true)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false false)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test-true (boolean true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (boolean false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "float"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4.5 (float 4.5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4.5
          :actual 4.5))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true  (is-int 4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-int \"4\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-int infinity))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-int neginfinity))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-int notanumber))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (is-int \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test-false (is-int 5.5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"a\" (string \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (vx/test/testdescribe
        :describename "(test \"ab\" (string \"a\" \"b\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "false"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-false false)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "true"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true true)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-false false)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test-false (! true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!="
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-ne true false)"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":ne"
          :passfail true
          :expected true))
       (vx/test/testdescribe
        :describename "(test-ne \"a\" \"b\")"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":ne"
          :passfail true
          :expected "a"
          :actual "b"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 6 (* 3 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 6
          :actual 6))
       (vx/test/testdescribe
        :describename "(test -10 (* 5 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -10
          :actual -10))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 6.4 (* 3.2 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 6.4
          :actual 6.4))
       (vx/test/testdescribe
        :describename "(test -10.2 (* 5.1 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -10.2
          :actual -10.2))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_2"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))
       (vx/test/testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_3"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))
       (vx/test/testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 5 (+ 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (vx/test/testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 5 (+ 2  3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (vx/test/testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test  3 (+1  2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))
       (vx/test/testdescribe
        :describename "(test -1 (+1 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -1
          :actual -1))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 1 (- 3 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))
       (vx/test/testdescribe
        :describename "(test 7 (- 5 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 5 (+ 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (vx/test/testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "/"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 3 (/ 6 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))
       (vx/test/testdescribe
        :describename "(test -5 (/ 10 -2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected -5
          :actual -5))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (< 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (< 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (< \"b\" \"d\" \"z\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<-"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (*
  (+
   (- 5 3)
   3)
  2)
 (<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 10
          :actual 10))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<<-"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (* (+ (- 3 5) 3) 2)
 (<<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 2
          :actual 2))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<="
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (<= 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<=_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (<= \"b\" \"d\" \"z\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "="
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (= true true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (= 2 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (= \"a\" \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (= (stringlist \"a\" \"b\" \"c\") (new stringlist \"a\" \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (= (stringmap :a \"1\" :b \"2\") (new stringmap :a \"1\" :b \"2\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "=_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-false (= 2 2 3))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "=="
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (== 0 0))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (== \"\" \"\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (> 3 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (> \"z\" \"y\" \"b\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">="
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (>= 3 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">=_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (>= \"z\" \"b\" \"b\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (and true true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (and true false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (and true true true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (and true true false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"b\"
 (any<-list (list \"a\" \"b\" \"c\") 1))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))
       (vx/test/testdescribe
        :describename
         "(test
 \"b\"
 (:1 (stringlist \"a\" \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list-reduce"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 24
 (any<-list-reduce : int
  (intlist 3 2 4)
  1
  (fn : int
   [total : int
    num   : int]
   (* total num))
 ))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-map"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"v2\"
 (any<-map (map :a \"v1\" :b \"v2\" :c \"v3\") :b))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "v2"
          :actual "v2"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "compare"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 1 (compare 3 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))
       (vx/test/testdescribe
        :describename "(test 1 (compare \"z\" \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true  (contains \"abcde\" \"cd\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (contains \"abcde\" \"dc\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true  (contains (stringlist \"1\" \"2\" \"3\") \"2\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (contains (intlist 1 2 3) 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (contains (list 1 \"2\" 3) 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "empty"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"\"     (empty string))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test (list) (empty list))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test (map)  (empty map))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"b\" (first<-list (stringlist \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list-fn-any<-any"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"b\" (first<-list-fn-any<-any (list nothing \"b\" \"c\") resolve))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"a\" (if (= 2 2) \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (vx/test/testdescribe
        :describename "(test \"\"  (if : string (= 1 2) \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"a\" (if (= 2 2) \"a\" \"b\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (vx/test/testdescribe
        :describename "(test \"b\"  (if (= 1 2) \"a\" \"b\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_2"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (if
  (then (= 2 3) false)
  (then (!= 3 3) false)
  (else (! false))))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int<-string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4 (int<-string \"4\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (vx/test/testdescribe
        :describename "(test 5 (int<-string \"5.4\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (vx/test/testdescribe
        :describename "(test 5 (int<-string \"5.9\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5))
       (vx/test/testdescribe
        :describename "(test notanumber  (int<-string \"notanumber\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected notanumber
          :actual notanumber))
       (vx/test/testdescribe
        :describename "(test infinity    (int<-string \"infinity\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected infinity
          :actual infinity))
       (vx/test/testdescribe
        :describename "(test neginfinity (int<-string \"neginfinity\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected neginfinity
          :actual neginfinity))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-empty_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (is-empty \"\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (is-empty (list)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (is-empty (map)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-number"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true  (is-number 5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-number 5.5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (is-number \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "last<-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"c\" (last<-list (list \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "c"
          :actual "c"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "length<-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 3 (length<-list (stringlist \"a\" \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "let"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 7
 (let
  [v1 : int := 2
   v2 : int := (+ v1 3)]
  (+ v1 v2)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "list<-map"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a1\" \"b2\")
 (list<-map : stringlist
  (stringmap \"a\" \"1\" \"b\" \"2\")
  (fn : string
   [key : string
    val : string]
   (string key val))))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b2")
          :actual
           (stringlist
            "a1"
            "b2")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "map<-list"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringmap
  \"keya\" \"a\"
  \"keyb\" \"b\")
 (map<-list : stringmap
  (stringlist \"a\" \"b\")
  (fn : string
   [val : string]
   (string \"key\" val))))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :keya "a"
            :keyb "b")
          :actual
           (stringmap
            :keya "a"
            :keyb "b")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "new"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test true (new boolean true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test 4 (new int 4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (vx/test/testdescribe
        :describename "(test 5.4 (new float 5.4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5.4
          :actual 5.4))
       (vx/test/testdescribe
        :describename "(test \"a\" (new string \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a\" \"b\" \"c\")
 (new stringlist \"a\" \"b\" \"c\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")))
       (vx/test/testdescribe
        :describename
         "(test
 (stringmap :a \"1\" :b \"2\")
 (new stringmap :a \"1\" :b \"2\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :a "1"
            :b "2")
          :actual
           (stringmap
            :a "1"
            :b "2")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (or true true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (or true false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (or false false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (or false true false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (or false false false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"a\" (resolve \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve_1"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4 (resolve (fn : int [] (+ 1 3))))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve-async"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4 (resolve : int (fn : int [] (+ 1 3))))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string-repeat"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"abab\" (string-repeat \"ab\" 2))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "abab"
          :actual "abab"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string<-any"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"true\"  (string<-any true))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "true"
          :actual "true"))
       (vx/test/testdescribe
        :describename "(test \"4\"     (string<-any 4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"))
       (vx/test/testdescribe
        :describename "(test \"5.4\"   (string<-any 5.4))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "5.4"
          :actual "5.4"))
       (vx/test/testdescribe
        :describename "(test \"\\"a\\"\" (string<-any \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "\"a\""
          :actual "\"a\""))
       (vx/test/testdescribe
        :describename
         "(test
 \"(stringlist
   \\"a\\"
   \\"b\\"
   \\"c\\")\"
 (string<-any (stringlist \"a\" \"b\" \"c\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringlist
 \"a\"
 \"b\"
 \"c\")"
          :actual
           "(stringlist
 \"a\"
 \"b\"
 \"c\")"))
       (vx/test/testdescribe
        :describename
         "(test
 \"(stringmap
   :a \\"1\\"
   :b \\"2\\")\"
 (string<-any (stringmap :a \"1\" :b \"2\")))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringmap
 :a \"1\"
 :b \"2\")"
          :actual
           "(stringmap
 :a \"1\"
 :b \"2\")"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "switch"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test 1
 (switch : int
  \"d\"
  (case (list \"b\" \"c\" \"d\") 1)
  (else 2)))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "type<-any"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test boolean (type<-any false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected boolean
          :actual boolean))
       (vx/test/testdescribe
        :describename "(test int (type<-any 5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected int
          :actual int))
       (vx/test/testdescribe
        :describename "(test string (type<-any \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected string
          :actual string))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/core"
     :casename "typename<-any"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"vx/core/boolean\" (typename<-any false))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/boolean"
          :actual "vx/core/boolean"))
       (vx/test/testdescribe
        :describename "(test \"vx/core/int\"     (typename<-any 5))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/int"
          :actual "vx/core/int"))
       (vx/test/testdescribe
        :describename "(test \"vx/core/string\"  (typename<-any \"a\"))"
        :testpkg "vx/core"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/string"
          :actual "vx/core/string")))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :false 1
      :globalpackagemap 0
      :infinity 0
      :mempool-active 0
      :msg-error 0
      :msg-info 0
      :msg-severe 0
      :msg-warning 0
      :neginfinity 0
      :newline 0
      :notanumber 0
      :nothing 0
      :quote 0
      :true 1)
    :funcmap
     (intmap
      :! 2
      :!-empty 0
      :!-empty_1 0
      :!= 2
      :!== 0
      :* 2
      :*_1 2
      :*_2 2
      :*_3 2
      :+ 2
      :+1 2
      :+_1 2
      :+_2 0
      :+_3 0
      :- 2
      :-_1 2
      :-_2 0
      :-_3 0
      :. 0
      :/ 2
      :< 1
      :<- 1
      :<<- 1
      :<= 1
      :<=_1 1
      :<_1 2
      := 5
      :== 2
      :=_1 1
      :> 1
      :>= 1
      :>=_1 1
      :>_1 1
      :allowfuncs<-security 0
      :allowtypenames<-typedef 0
      :allowtypes<-typedef 0
      :and 2
      :and_1 2
      :any<-any 0
      :any<-any-async 0
      :any<-any-context 0
      :any<-any-context-async 0
      :any<-func 0
      :any<-func-async 0
      :any<-int 0
      :any<-key-value 0
      :any<-key-value-async 0
      :any<-list 2
      :any<-list-reduce 1
      :any<-list-reduce-next 0
      :any<-map 1
      :any<-none 0
      :any<-none-async 0
      :any<-reduce 0
      :any<-reduce-async 0
      :any<-reduce-next 0
      :any<-reduce-next-async 0
      :any<-struct 0
      :async 0
      :boolean-permission<-func 0
      :boolean<-any 0
      :boolean<-func 0
      :boolean<-none 0
      :case 0
      :case_1 0
      :compare 2
      :contains 2
      :contains_1 3
      :context-main 0
      :copy 0
      :else 0
      :empty 3
      :extends<-any 0
      :extends<-typedef 0
      :first<-list 1
      :first<-list-fn-any<-any 1
      :fn 0
      :funcdef<-func 0
      :funcname<-funcdef 0
      :global-package-get 0
      :global-package-set 0
      :if 2
      :if_1 2
      :if_2 1
      :int<-func 0
      :int<-string 6
      :is-empty 0
      :is-empty_1 3
      :is-endswith 0
      :is-func 0
      :is-int 0
      :is-number 3
      :is-pass<-permission 0
      :last<-list 1
      :length<-list 1
      :let 1
      :let-async 0
      :list-join<-list 0
      :list<-list 0
      :list<-list-async 0
      :list<-map 1
      :list<-map-async 0
      :list<-type 0
      :log 0
      :log_1 0
      :main 0
      :map<-list 1
      :mempool-addref 0
      :mempool-release 0
      :mempool-removeref 0
      :mempool-removerefchildren 0
      :mempool-reserve 0
      :msg<-error 0
      :msg<-warning 0
      :msgblock<-msgblock-msg 0
      :msgblock<-msgblock-msgblock 0
      :name<-typedef 0
      :native 0
      :native<-any 0
      :new 6
      :number<-func 0
      :or 3
      :or_1 2
      :packagename<-typedef 0
      :path<-context-path 0
      :path<-setting-path 0
      :permission<-id-context 0
      :properties<-typedef 0
      :proplast<-typedef 0
      :resolve 1
      :resolve-async 1
      :resolve-first 0
      :resolve-list 0
      :resolve_1 1
      :security<-context 0
      :security<-user 0
      :session<-context 0
      :setting<-context 0
      :string-repeat 1
      :string<-any 6
      :string<-any-indent 0
      :string<-func 0
      :switch 1
      :then 0
      :traits<-typedef 0
      :type<-any 3
      :typedef<-any 0
      :typedef<-type 0
      :typename<-any 3
      :typename<-type 0
      :typename<-typedef 0
      :typenames<-typelist 0
      :user<-context 0)
    :testpkg "vx/core"
    :typemap
     (intmap
      :any 0
      :any-async<-func 0
      :any<-anylist 0
      :anylist 0
      :anytype 0
      :arg 0
      :arglist 0
      :argmap 0
      :boolean 4
      :booleanlist 0
      :collection 0
      :compilelanguages 0
      :connect 0
      :connectlist 0
      :connectmap 0
      :const 0
      :constdef 0
      :constlist 0
      :constmap 0
      :context 0
      :decimal 0
      :error 0
      :float 1
      :func 0
      :funcdef 0
      :funclist 0
      :funcmap 0
      :int 7
      :intlist 0
      :intmap 0
      :list 0
      :listtype 0
      :map 0
      :maptype 0
      :mempool 0
      :msg 0
      :msgblock 0
      :msgblocklist 0
      :msglist 0
      :none 0
      :notype 0
      :number 0
      :numberlist 0
      :numbermap 0
      :package 0
      :packagemap 0
      :permission 0
      :permissionlist 0
      :permissionmap 0
      :security 0
      :session 0
      :setting 0
      :state 0
      :statelistener 0
      :string 2
      :stringlist 0
      :stringmap 0
      :struct 0
      :thenelse 0
      :thenelselist 0
      :type 0
      :typedef 0
      :typelist 0
      :typemap 0
      :user 0
      :value 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 153)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 153)
    :constnums
     (vx/test/testcoveragenums
      :pct 14
      :tests 2
      :total 14)
    :docnums
     (vx/test/testcoveragenums
      :pct 84
      :tests 198
      :total 233)
    :funcnums
     (vx/test/testcoveragenums
      :pct 44
      :tests 58
      :total 129)
    :testpkg "vx/core"
    :totalnums
     (vx/test/testcoveragenums
      :pct 30
      :tests 64
      :total 209)
    :typenums
     (vx/test/testcoveragenums
      :pct 6
      :tests 4
      :total 66))
  :passfail true
  :testpkg "vx/core")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/csv"
     :casename "textblock-csv<-string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (tb/textblock
  :text
`\"a\",\"b\"
1,\"2\"`
  :endpos 13
  :delim delimcsv
  :children
   (tb/textblocklist
    (tb/textblock
     :text `\"a\"`
     :endpos 3
     :delim tb/delimquote
     :children
      (tb/textblocklist
       (tb/textblock
        :text \"a\"
        :startpos 1
        :endpos 2)))
    (tb/textblock
     :text \",\"
     :startpos 3
     :endpos 4
     :delim tb/delimcomma)
    (tb/textblock
     :text `\"b\"`
     :startpos 4
     :endpos 7
     :delim tb/delimquote
     :children
      (tb/textblocklist
       (tb/textblock
        :text \"b\"
        :startpos 5
        :endpos 6)))
    (tb/textblock
     :text \"
\"
     :startpos 7
     :endpos 8
     :delim tb/delimline)
    (tb/textblock
     :text \"1\"
     :startpos 8
     :endpos 9)
    (tb/textblock
     :text \",\"
     :startpos 9
     :endpos 10
     :delim tb/delimcomma)
    (tb/textblock
     :text `\"2\"`
     :startpos 10
     :endpos 13
     :delim tb/delimquote
     :children
      (tb/textblocklist
       (tb/textblock
        :text \"2\"
        :startpos 11
        :endpos 12)))))
 (textblock-csv<-string
`\"a\",\"b\"
1,\"2\"`
 )
)"
        :testpkg "vx/data/csv"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text
             "\"a\",\"b\"
1,\"2\""
            :endpos 13
            :delim
             (vx/data/textblock/delim
              :name "delimcsv"
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
")
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "\"a\""
               :endpos 3
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "a"
                  :startpos 1
                  :endpos 2)))
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "\"b\""
               :startpos 4
               :endpos 7
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "b"
                  :startpos 5
                  :endpos 6)))
              (vx/data/textblock/textblock
               :text
                "
"
               :startpos 7
               :endpos 8
               :delim
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
"))
              (vx/data/textblock/textblock
               :text "1"
               :startpos 8
               :endpos 9)
              (vx/data/textblock/textblock
               :text ","
               :startpos 9
               :endpos 10
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "\"2\""
               :startpos 10
               :endpos 13
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "2"
                  :startpos 11
                  :endpos 12)))))
          :actual
           (vx/data/textblock/textblock
            :text
             "\"a\",\"b\"
1,\"2\""
            :endpos 13
            :delim
             (vx/data/textblock/delim
              :name "delimcsv"
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
")
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "\"a\""
               :endpos 3
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "a"
                  :startpos 1
                  :endpos 2)))
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "\"b\""
               :startpos 4
               :endpos 7
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "b"
                  :startpos 5
                  :endpos 6)))
              (vx/data/textblock/textblock
               :text
                "
"
               :startpos 7
               :endpos 8
               :delim
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
"))
              (vx/data/textblock/textblock
               :text "1"
               :startpos 8
               :endpos 9)
              (vx/data/textblock/textblock
               :text ","
               :startpos 9
               :endpos 10
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "\"2\""
               :startpos 10
               :endpos 13
               :delim
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "2"
                  :startpos 11
                  :endpos 12))))))))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :delimcsv 0)
    :funcmap
     (intmap
      :csv<-textblock 0
      :csvrows<-textblock 0
      :textblock-csv<-string 1)
    :testpkg "vx/data/csv"
    :typemap
     (intmap
      :csv 0
      :csvrows 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 3)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 3)
    :constnums
     (vx/test/testcoveragenums
      :total 1)
    :docnums
     (vx/test/testcoveragenums
      :pct 33
      :tests 2
      :total 6)
    :funcnums
     (vx/test/testcoveragenums
      :pct 33
      :tests 1
      :total 3)
    :testpkg "vx/data/csv"
    :totalnums
     (vx/test/testcoveragenums
      :pct 16
      :tests 1
      :total 6)
    :typenums
     (vx/test/testcoveragenums
      :total 2))
  :passfail true
  :testpkg "vx/data/csv")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :testpkg "vx/data/db"
    :typemap
     (intmap
      :db 0
      :dbcell 0
      :dbcellmap 0
      :dbfield 0
      :dbfieldmap 0
      :dbid 0
      :dblink 0
      :dblinklist 0
      :dbnode 0
      :dbnote 0
      :dbtable 0
      :dbvalue 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :pct 100)
    :bigotimenums
     (vx/test/testcoveragenums
      :pct 100)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 12
      :total 12)
    :funcnums
     (vx/test/testcoveragenums
      :pct 100)
    :testpkg "vx/data/db"
    :totalnums
     (vx/test/testcoveragenums
      :total 12)
    :typenums
     (vx/test/testcoveragenums
      :total 12))
  :passfail true
  :testpkg "vx/data/db")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-exists<-file"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name \"boolean_exists_from_file.txt\"
   :path \"src/test/resources/vx\")))"
        :testpkg "vx/data/file"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-write<-file-string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (boolean-write<-file-string
  (file
   :name \"boolean_write_from_file_string.txt\"
   :path \"src/test/resources/vx\")
  \"writetext\"))"
        :testpkg "vx/data/file"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "file-read<-file"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (file
  :name \"string_read_from_file.txt\"
  :path \"src/test/resources/vx\"
  :text \"testdata\")
 (file-read<-file
  (file
   :name \"string_read_from_file.txt\"
   :path \"src/test/resources/vx\")))"
        :testpkg "vx/data/file"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/file/file
            :name "string_read_from_file.txt"
            :path "src/test/resources/vx"
            :text "testdata")
          :actual
           (vx/data/file/file
            :name "string_read_from_file.txt"
            :path "src/test/resources/vx"
            :text "testdata")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "string-read<-file"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"testdata\"
 (string-read<-file
  (file
   :name \"string_read_from_file.txt\"
   :path \"src/test/resources/vx\")))"
        :testpkg "vx/data/file"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "testdata"
          :actual "testdata")))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :boolean-exists<-file 1
      :boolean-write<-file-any 0
      :boolean-write<-file-string 1
      :file-read<-file 1
      :name<-file 0
      :path<-file 0
      :pathcurrent<-os 0
      :pathfull<-file 0
      :string-read<-file 1)
    :testpkg "vx/data/file"
    :typemap
     (intmap
      :file 0
      :fileformat 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 9)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 9)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 90
      :tests 10
      :total 11)
    :funcnums
     (vx/test/testcoveragenums
      :pct 44
      :tests 4
      :total 9)
    :testpkg "vx/data/file"
    :totalnums
     (vx/test/testcoveragenums
      :pct 36
      :tests 4
      :total 11)
    :typenums
     (vx/test/testcoveragenums
      :total 2))
  :passfail true
  :testpkg "vx/data/file")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :testpkg "vx/data/table"
    :typemap
     (intmap
      :cell 0
      :celllist 0
      :cellmap 0
      :field 0
      :fieldlist 0
      :fieldmap 0
      :filter 0
      :row 0
      :rowlist 0
      :rowmap 0
      :sort 0
      :table 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :pct 100)
    :bigotimenums
     (vx/test/testcoveragenums
      :pct 100)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :total 12)
    :funcnums
     (vx/test/testcoveragenums
      :pct 100)
    :testpkg "vx/data/table"
    :totalnums
     (vx/test/testcoveragenums
      :total 12)
    :typenums
     (vx/test/testcoveragenums
      :total 12))
  :passfail true
  :testpkg "vx/data/table")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delimlist"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (new delimlist
  delimcomma
  delimwhitespace)
 (delimlist
  delimcomma
  delimwhitespace))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delimlist
            (vx/data/textblock/delim
             :name "delimcomma"
             :starttext ",")
            (vx/data/textblock/delim
             :name "delimwhitespace"
             :starttext ":whitespace"
             :endtext ":nonwhitespace"))
          :actual
           (vx/data/textblock/delimlist
            (vx/data/textblock/delim
             :name "delimcomma"
             :starttext ",")
            (vx/data/textblock/delim
             :name "delimwhitespace"
             :starttext ":whitespace"
             :endtext ":nonwhitespace"))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-close<-delim"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (copy delimbracketangle
  :delimlist
   (delimlist
    (copy delimclose
     :starttext \">\")))
 (delim-close<-delim delimbracketangle))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delim
            :name "delimbracketangle"
            :starttext "<"
            :endtext ">"
            :delimlist
             (vx/data/textblock/delimlist
              (vx/data/textblock/delim
               :name "delimclose"
               :starttext ">")))
          :actual
           (vx/data/textblock/delim
            :name "delimbracketangle"
            :starttext "<"
            :endtext ">"
            :delimlist
             (vx/data/textblock/delimlist
              (vx/data/textblock/delim
               :name "delimclose"
               :starttext ">")))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-first<-delim-delim"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (copy delimcomma
  :startpos 1)
 (delim-first<-delim-delim
  (copy delimspace
   :startpos 2)
  (copy delimcomma
   :startpos 1)))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)
          :actual
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)))
       (vx/test/testdescribe
        :describename
         "(test
 (empty delim)
 (delim-first<-delim-delim
  (delim
   :startpos -1)
  (empty delim)))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-first<-string-delimlist-offset"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (copy delimcomma
  :startpos 1)
 (delim-first<-string-delimlist-offset
  \"a, b\"
  (delimlist delimspace delimcomma)
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)
          :actual
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delim-pos<-string-delim-offset"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (copy delimcomma
  :startpos 1)
 (delim-pos<-string-delim-offset
  \"a,b\"
  delimcomma
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)
          :actual
           (vx/data/textblock/delim
            :name "delimcomma"
            :starttext ","
            :startpos 1)))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "delimlist-pos<-string-delimlist-offset"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (delimlist
  (copy delimspace
   :startpos 2)
  (copy delimcomma
   :startpos 1))
 (delimlist-pos<-string-delimlist-offset
  \"a, b\"
  (delimlist delimspace delimcomma)
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/delimlist
            (vx/data/textblock/delim
             :name "delimspace"
             :starttext " "
             :endtext " "
             :startpos 2)
            (vx/data/textblock/delim
             :name "delimcomma"
             :starttext ","
             :startpos 1))
          :actual
           (vx/data/textblock/delimlist
            (vx/data/textblock/delim
             :name "delimspace"
             :starttext " "
             :endtext " "
             :startpos 2)
            (vx/data/textblock/delim
             :name "delimcomma"
             :starttext ","
             :startpos 1))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "stringlist<-textblocklist"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a\" \"b\")
 (stringlist<-textblocklist
  (textblocklist
   (textblock :text \"a\")
   (textblock :text \"b\"))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b")
          :actual
           (stringlist
            "a"
            "b")))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "text<-textblock"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"a\"
 (text<-textblock
  (textblock
   :text \"a\")))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-parse"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a,b,c\"
  :startpos 0
  :endpos 5
  :delim
   (delim
    :startpos 0
    :delimlist
     (delimlist
      delimcomma))
  :children
   (textblocklist
    (textblock
     :text \"a\"
     :startpos 0
     :endpos 1)
    (textblock
     :text \",\"
     :startpos 1
     :endpos 2
     :delim delimcomma)
    (textblock
     :text \"b\"
     :startpos 2
     :endpos 3)
    (textblock
     :text \",\"
     :startpos 3
     :endpos 4
     :delim delimcomma)
    (textblock
     :text \"c\"
     :startpos 4
     :endpos 5)))
 (textblock-parse
  (textblock
   :text \"a,b,c\"
   :delim
    (delim
     :delimlist
      (delimlist
       delimcomma)))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a,b,c"
            :endpos 5
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "b"
               :startpos 2
               :endpos 3)
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))
          :actual
           (vx/data/textblock/textblock
            :text "a,b,c"
            :endpos 5
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "b"
               :startpos 2
               :endpos 3)
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a<b>c\"
  :startpos 0
  :endpos 5
  :delim
   (delim
    :startpos 0
    :delimlist
     (delimlist
      delimbracketangle))
  :children
   (textblocklist
    (textblock
     :text \"a\"
     :startpos 0
     :endpos 1)
    (textblock
     :text \"<b>\"
     :startpos 1
     :endpos 4
     :delim delimbracketangle
     :children
      (textblocklist
       (textblock
        :text \"b\"
        :startpos 2
        :endpos 3)))
    (textblock
     :text \"c\"
     :startpos 4
     :endpos 5)))
 (textblock-parse
  (textblock
   :text \"a<b>c\"
   :delim
    (delim
     :delimlist
      (delimlist
       delimbracketangle)))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a<b>c"
            :endpos 5
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text "<b>"
               :startpos 1
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "b"
                  :startpos 2
                  :endpos 3)))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))
          :actual
           (vx/data/textblock/textblock
            :text "a<b>c"
            :endpos 5
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text "<b>"
               :startpos 1
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")
               :children
                (vx/data/textblock/textblocklist
                 (vx/data/textblock/textblock
                  :text "b"
                  :startpos 2
                  :endpos 3)))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-parse-one"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :endpos 1)
 (textblock-parse-one
  (textblock
   :text \"a\")))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1)
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1)))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"b\"
  :children
   (textblocklist
    (textblock
     :text \"a\"
     :endpos 1)))
 (textblock-parse-one
  (textblock
   :text \"a\"
   :parent
    (textblock
     :text \"b\"))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "b"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)))
          :actual
           (vx/data/textblock/textblock
            :text "b"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :endpos 1
  :parent
   (textblock
    :text \",b,c\"
    :startpos 1
    :curpos 1
    :delim
     (copy delimcomma
      :startpos 1
      :delimlist
       (delimlist
        delimcomma))
    :parent
     (textblock
      :text \"a,b,c\"
      :endpos 5
      :delim
       (delim
        :delimlist
         (delimlist
          delimcomma)))))
 (textblock-parse-one
  (textblock
   :text \"a,b,c\"
   :delim
    (delim
     :delimlist
      (delimlist
       delimcomma)))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :parent
             (vx/data/textblock/textblock
              :text ",b,c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :endpos 5
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","))))))
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :parent
             (vx/data/textblock/textblock
              :text ",b,c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :endpos 5
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","))))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \",b,c\"
  :startpos 1
  :curpos 1
  :delim
   (copy delimcomma
    :startpos 1
    :delimlist
     (delimlist
      delimcomma))
  :parent
   (textblock
    :text \"a,b,c\"
    :delim
     (delim
      :delimlist
       (delimlist
        delimcomma))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :endpos 1))))
 (textblock-parse-one
  (textblock
   :text \"a\"
   :endpos 1
   :parent
    (textblock
     :text \",b,c\"
     :startpos 1
     :curpos 1
     :delim
      (copy delimcomma
       :startpos 1
       :delimlist
        (delimlist
         delimcomma))
     :parent
      (textblock
       :text \"a,b,c\"
       :delim
        (delim
         :delimlist
          (delimlist
           delimcomma)))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text ",b,c"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimcomma"
              :starttext ","
              :startpos 1
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1))))
          :actual
           (vx/data/textblock/textblock
            :text ",b,c"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimcomma"
              :starttext ","
              :startpos 1
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"b,c\"
  :startpos 2
  :delim
   (delim
    :delimlist
     (delimlist
      delimcomma))
  :parent
   (textblock
    :text \"a,b,c\"
    :delim
     (delim
      :delimlist
       (delimlist
        delimcomma))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :startpos 0
       :endpos 1)
      (textblock
       :text \",\"
       :startpos 1
       :endpos 2
       :delim delimcomma))))
 (textblock-parse-one
  (textblock
   :text \",b,c\"
   :startpos 1
   :curpos 1
   :delim
    (copy delimcomma
     :startpos 1
     :delimlist
      (delimlist
       delimcomma))
   :parent
    (textblock
     :text \"a,b,c\"
     :delim
      (delim
       :delimlist
        (delimlist
         delimcomma))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "b,c"
            :startpos 2
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 1
                 :endpos 2
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (vx/data/textblock/textblock
            :text "b,c"
            :startpos 2
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 1
                 :endpos 2
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"b\"
  :startpos 2
  :endpos 3
  :parent
   (textblock
    :text \",c\"
    :startpos 3
    :curpos 1
    :delim
     (copy delimcomma
      :startpos 1
      :delimlist
       (delimlist
        delimcomma))
    :parent
     (textblock
      :text \"a,b,c\"
      :delim
       (delim
        :delimlist
         (delimlist
          delimcomma))
      :children
       (textblocklist
        (textblock
         :text \"a\"
         :endpos 1)
        (textblock
         :text \",\"
         :startpos 1
         :endpos 2
         :delim
          (copy delimcomma
           :startpos 1
           :endpos 2))))))
 (textblock-parse-one
  (textblock
   :text \"b,c\"
   :startpos 2
   :delim
    (delim
     :delimlist
      (delimlist
       delimcomma))
   :parent
    (textblock
     :text \"a,b,c\"
     :delim
      (delim
       :delimlist
        (delimlist
         delimcomma))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1)
       (textblock
        :text \",\"
        :startpos 1
        :endpos 2
        :delim
         (copy delimcomma
          :startpos 1
          :endpos 2)))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "b"
            :startpos 2
            :endpos 3
            :parent
             (vx/data/textblock/textblock
              :text ",c"
              :startpos 3
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ",")))
                :children
                 (vx/data/textblock/textblocklist
                  (vx/data/textblock/textblock
                   :text "a"
                   :endpos 1)
                  (vx/data/textblock/textblock
                   :text ","
                   :startpos 1
                   :endpos 2
                   :delim
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :startpos 1
                     :endpos 2))))))
          :actual
           (vx/data/textblock/textblock
            :text "b"
            :startpos 2
            :endpos 3
            :parent
             (vx/data/textblock/textblock
              :text ",c"
              :startpos 3
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ",")))
                :children
                 (vx/data/textblock/textblocklist
                  (vx/data/textblock/textblock
                   :text "a"
                   :endpos 1)
                  (vx/data/textblock/textblock
                   :text ","
                   :startpos 1
                   :endpos 2
                   :delim
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :startpos 1
                     :endpos 2))))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :endpos 1
  :parent
   (textblock
    :text \"<b>c\"
    :delim
     (copy delimbracketangle
      :startpos 1)
    :close
     (copy delimclose
      :starttext \">\")
    :startpos 1
    :curpos 1
    :parent
     (textblock
      :text \"a<b>c\"
      :endpos 5
      :delim
       (delim
        :delimlist
         (delimlist
          delimbracketangle)))))
 (textblock-parse-one
  (textblock
   :text \"a<b>c\"
   :delim
    (delim
     :delimlist
      (delimlist
       delimbracketangle)))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :parent
             (vx/data/textblock/textblock
              :text "<b>c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :startpos 1)
              :close
               (vx/data/textblock/delim
                :name "delimclose"
                :starttext ">")
              :parent
               (vx/data/textblock/textblock
                :text "a<b>c"
                :endpos 5
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimbracketangle"
                     :starttext "<"
                     :endtext ">"))))))
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :parent
             (vx/data/textblock/textblock
              :text "<b>c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimbracketangle"
                :starttext "<"
                :endtext ">"
                :startpos 1)
              :close
               (vx/data/textblock/delim
                :name "delimclose"
                :starttext ">")
              :parent
               (vx/data/textblock/textblock
                :text "a<b>c"
                :endpos 5
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimbracketangle"
                     :starttext "<"
                     :endtext ">"))))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"<b>c\"
  :startpos 2
  :curpos 1
  :delim
   (copy delimbracketangle
    :startpos 1)
  :close
   (copy delimclose
    :starttext \">\")
  :parent
   (textblock
    :text \"a<b>c\"
    :delim 
     (delim
      :delimlist
       (delimlist
        delimbracketangle))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :endpos 1))))
 (textblock-parse-one
  (textblock
   :text \"a\"
   :endpos 1
   :parent
    (textblock
     :text \"<b>c\"
     :startpos 2
     :curpos 1
     :delim
      (copy delimbracketangle
       :startpos 1)
     :close
      (copy delimclose
       :starttext \">\")
     :parent
      (textblock
       :text \"a<b>c\"
       :delim
        (delim
         :delimlist
          (delimlist
           delimbracketangle)))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "<b>c"
            :startpos 2
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :startpos 1)
            :close
             (vx/data/textblock/delim
              :name "delimclose"
              :starttext ">")
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1))))
          :actual
           (vx/data/textblock/textblock
            :text "<b>c"
            :startpos 2
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :startpos 1)
            :close
             (vx/data/textblock/delim
              :name "delimclose"
              :starttext ">")
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"c\"
  :startpos 4
  :delim
   (delim
    :delimlist
     (delimlist
      delimbracketangle))
  :parent
   (textblock
    :text \"a<b>c\"
    :delim 
     (delim
      :delimlist
       (delimlist
        delimbracketangle))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :endpos 1)
      (textblock
       :text \"<b>\"
       :delim delimbracketangle
       :startpos 1
       :endpos 4
       :children
        (textblocklist
         (textblock
          :text \"b\"
          :startpos 2
          :endpos 3))))))
 (textblock-parse-one
  (textblock
   :text \"<b>c\"
   :startpos 1
   :curpos 1
   :delim
    (copy delimbracketangle
     :startpos 1)
   :close
    (copy delimclose
     :starttext \">\")
   :parent
    (textblock
     :text \"a<b>c\"
     :delim
      (delim
       :delimlist
        (delimlist
         delimbracketangle))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "c"
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text "<b>"
                 :startpos 1
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "b"
                    :startpos 2
                    :endpos 3))))))
          :actual
           (vx/data/textblock/textblock
            :text "c"
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text "<b>"
                 :startpos 1
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "b"
                    :startpos 2
                    :endpos 3))))))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-pop"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"parent\"
  :children
   (textblocklist
    (textblock
     :text \"child\"
     :endpos 5)))
 (textblock-pop
  (textblock
   :text \"child\"
   :parent
    (textblock
     :text \"parent\"))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "parent"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "child"
               :endpos 5)))
          :actual
           (vx/data/textblock/textblock
            :text "parent"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "child"
               :endpos 5)))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a,b,c\"
  :delim
   (delim
    :delimlist
     (delimlist
      (delim
       :name \"delimcomma\"
       :starttext \",\")))
  :children
   (textblocklist
    (textblock
     :text \"a\"
     :endpos 1)
    (textblock
     :text \",\"
     :startpos 1
     :endpos 2
     :delim
      (delim
       :name \"delimcomma\"
       :starttext \",\"
       :startpos 1
       :endpos 2))
    (textblock
     :text \"b\"
     :startpos 2
     :endpos 3)
    (textblock
     :text \",\"
     :startpos 3
     :endpos 4
     :delim
      (delim
       :name \"delimcomma\"
       :starttext \",\"
       :startpos 1
       :endpos 4))
    (textblock
     :text \"c\"
     :startpos 4
     :endpos 5)))
 (textblock-pop
  (textblock
   :text \"c\"
   :startpos 4
   :endpos 5
   :parent
    (textblock
     :text \"a,b,c\"
     :delim
      (delim
       :delimlist
        (delimlist
         (delim
          :name \"delimcomma\"
          :starttext \",\")))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1)
       (textblock
        :text \",\"
        :startpos 1
        :endpos 2
        :delim
         (delim
          :name \"delimcomma\"
          :starttext \",\"
          :startpos 1
          :endpos 2))
       (textblock
        :text \"b\"
        :startpos 2
        :endpos 3)
       (textblock
        :text \",\"
        :startpos 3
        :endpos 4
        :delim
         (delim
          :name \"delimcomma\"
          :starttext \",\"
          :startpos 1
          :endpos 4)))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a,b,c"
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 2))
              (vx/data/textblock/textblock
               :text "b"
               :startpos 2
               :endpos 3)
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 4))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))
          :actual
           (vx/data/textblock/textblock
            :text "a,b,c"
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "a"
               :endpos 1)
              (vx/data/textblock/textblock
               :text ","
               :startpos 1
               :endpos 2
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 2))
              (vx/data/textblock/textblock
               :text "b"
               :startpos 2
               :endpos 3)
              (vx/data/textblock/textblock
               :text ","
               :startpos 3
               :endpos 4
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :startpos 1
                 :endpos 4))
              (vx/data/textblock/textblock
               :text "c"
               :startpos 4
               :endpos 5)))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-pop<-textblock-delim"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"parent\"
  :children
   (textblocklist
    (textblock
     :text \"child\"
     :delim delimcomma)))
 (textblock-pop<-textblock-delim
  (textblock
   :text \"child\"
   :parent
    (textblock
     :text \"parent\"))
   delimcomma))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "parent"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "child"
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))))
          :actual
           (vx/data/textblock/textblock
            :text "parent"
            :children
             (vx/data/textblock/textblocklist
              (vx/data/textblock/textblock
               :text "child"
               :delim
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"c\"
  :startpos 4
  :delim
   (delim
    :delimlist
     (delimlist
      delimbracketangle))
  :parent
   (textblock
    :text \"a<b>c\"
    :delim
     (delim
      :delimlist
       (delimlist
        delimbracketangle))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :startpos 0
       :endpos 1)
      (textblock
       :text \"<b>\"
       :startpos 1
       :endpos 4
       :delim delimbracketangle
       :children
        (textblocklist
         (textblock
          :text \"b\"
          :startpos 2
          :endpos 3))))))
 (textblock-pop<-textblock-delim
  (textblock
   :text \"<b>c\"
   :startpos 1
   :curpos 1
   :delim
    (copy delimbracketangle
     :startpos 1)
   :close
    (copy delimclose
     :starttext \">\")
   :parent
    (textblock
     :text \"a<b>c\"
     :delim
      (delim
       :delimlist
        (delimlist
         delimbracketangle))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1))))
  (copy delimclose
   :starttext \">\"
   :startpos 2)))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "c"
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text "<b>"
                 :startpos 1
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "b"
                    :startpos 2
                    :endpos 3))))))
          :actual
           (vx/data/textblock/textblock
            :text "c"
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text "a<b>c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text "<b>"
                 :startpos 1
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimbracketangle"
                   :starttext "<"
                   :endtext ">")
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "b"
                    :startpos 2
                    :endpos 3))))))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-push"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"b,c\"
  :startpos 2
  :delim
   (delim
    :delimlist
     (delimlist
      (copy delimcomma
       :delimlist
        (delimlist
         delimbracketangle))))
  :parent
   (textblock
    :text \"a,b,c\"
    :delim
     (delim
      :delimlist
       (delimlist
        (copy delimcomma
         :delimlist
          (delimlist
           delimbracketangle))))
    :children
     (textblocklist
      (textblock
       :text \"a\"
       :startpos 0
       :endpos 1)
      (textblock
       :text \",\"
       :startpos 1
       :endpos 2
       :delim delimcomma))))
 (textblock-push
  (textblock
   :text \",b,c\"
   :startpos 1
   :curpos 1
   :delim
    (copy delimcomma
     :delimlist
      (delimlist
       (copy delimcomma
        :delimlist
         (delimlist
          delimbracketangle))))
   :parent
    (textblock
     :text \"a,b,c\"
     :delim
      (delim
       :delimlist
        (delimlist
         (copy delimcomma
          :delimlist
           (delimlist
            delimbracketangle))))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "b,c"
            :startpos 2
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :delimlist
                  (vx/data/textblock/delimlist
                   (vx/data/textblock/delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")))))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 1
                 :endpos 2
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (vx/data/textblock/textblock
            :text "b,c"
            :startpos 2
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ","
                 :delimlist
                  (vx/data/textblock/delimlist
                   (vx/data/textblock/delim
                    :name "delimbracketangle"
                    :starttext "<"
                    :endtext ">")))))
            :parent
             (vx/data/textblock/textblock
              :text "a,b,c"
              :delim
               (vx/data/textblock/delim
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "a"
                 :endpos 1)
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 1
                 :endpos 2
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text `\"b\"
1,\"2\"`
  :startpos 4
  :delim
   (delim
    :delimlist
     (delimlist
      delimline
      delimquote
      delimcomma))
  :parent
   (textblock
    :text `\"a\",\"b\"
1,\"2\"`
    :endpos 13
    :delim
     (delim
      :name \"delimcsv\"
      :delimlist
       (delimlist
        delimline
        delimquote
        delimcomma))
  :children
   (textblocklist
    (textblock
     :text `\"a\"`
     :endpos 3
     :delim
      (copy delimquote
       :endpos 2)
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :startpos 1
        :endpos 2)))
    (textblock
     :text \",\"
     :startpos 3
     :endpos 4           
     :delim
      delimcomma
       ))))
 (textblock-push
  (textblock
   :text `,\"b\"
1,\"2\"`
    :startpos 3
    :curpos 1
    :delim
     (copy delimcomma
      :delimlist
       (delimlist
        delimline
        delimquote
        delimcomma))
    :parent
     (textblock
      :text `\"a\",\"b\"
1,\"2\"`
      :endpos 13
      :delim
       (delim
        :name \"delimcsv\"
        :delimlist
         (delimlist
          delimline
          delimquote
          delimcomma))
      :children
       (textblocklist
        (textblock
         :text \"\\"a\\"\"
         :endpos 3
         :delim
          (copy delimquote
           :endpos 2)
         :children
          (textblocklist
           (textblock
            :text \"a\"
            :startpos 1
            :endpos 2))))))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text
             "\"b\"
1,\"2\""
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
")
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text
               "\"a\",\"b\"
1,\"2\""
              :endpos 13
              :delim
               (vx/data/textblock/delim
                :name "delimcsv"
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimline"
                   :starttext
                    "
")
                  (vx/data/textblock/delim
                   :name "delimquote"
                   :starttext "\""
                   :endtext "\"")
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "\"a\""
                 :endpos 3
                 :delim
                  (vx/data/textblock/delim
                   :name "delimquote"
                   :starttext "\""
                   :endtext "\""
                   :endpos 2)
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "a"
                    :startpos 1
                    :endpos 2)))
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 3
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))
          :actual
           (vx/data/textblock/textblock
            :text
             "\"b\"
1,\"2\""
            :startpos 4
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimline"
                 :starttext
                  "
")
                (vx/data/textblock/delim
                 :name "delimquote"
                 :starttext "\""
                 :endtext "\"")
                (vx/data/textblock/delim
                 :name "delimcomma"
                 :starttext ",")))
            :parent
             (vx/data/textblock/textblock
              :text
               "\"a\",\"b\"
1,\"2\""
              :endpos 13
              :delim
               (vx/data/textblock/delim
                :name "delimcsv"
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimline"
                   :starttext
                    "
")
                  (vx/data/textblock/delim
                   :name "delimquote"
                   :starttext "\""
                   :endtext "\"")
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))
              :children
               (vx/data/textblock/textblocklist
                (vx/data/textblock/textblock
                 :text "\"a\""
                 :endpos 3
                 :delim
                  (vx/data/textblock/delim
                   :name "delimquote"
                   :starttext "\""
                   :endtext "\""
                   :endpos 2)
                 :children
                  (vx/data/textblock/textblocklist
                   (vx/data/textblock/textblock
                    :text "a"
                    :startpos 1
                    :endpos 2)))
                (vx/data/textblock/textblock
                 :text ","
                 :startpos 3
                 :endpos 4
                 :delim
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ",")))))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-push<-textblock-delim"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :delim
   (delim
    :delimlist
     (delimlist
      delimbracketangle))
  :endpos 1
  :parent
   (textblock
    :text \",b,c\"
    :startpos 1
    :curpos 1
    :delim
     (copy delimcomma
      :startpos 1
      :delimlist
       (delimlist
        (copy delimcomma
         :delimlist
          (delimlist
           delimbracketangle))))
    :parent
     (textblock
      :text \"a,b,c\"
      :delim
       (delim
        :delimlist
         (delimlist
          (copy delimcomma
           :delimlist
            (delimlist
             delimbracketangle)))))))
 (textblock-push<-textblock-delim
  (textblock
   :text \"a,b,c\"
   :delim
    (delim
     :delimlist
      (delimlist
       (copy delimcomma
        :delimlist
         (delimlist
          delimbracketangle)))))
  (copy delimcomma
   :startpos 1
   :delimlist
    (delimlist
     delimbracketangle))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text ",b,c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :delimlist
                      (vx/data/textblock/delimlist
                       (vx/data/textblock/delim
                        :name "delimbracketangle"
                        :starttext "<"
                        :endtext ">"))))))))
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text ",b,c"
              :startpos 1
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :delimlist
                      (vx/data/textblock/delimlist
                       (vx/data/textblock/delim
                        :name "delimbracketangle"
                        :starttext "<"
                        :endtext ">"))))))))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"b\"
  :startpos 2
  :endpos 3
  :delim
   (delim
    :delimlist
     (delimlist
      delimbracketangle))
  :parent
   (textblock
    :text \",c\"
    :startpos 3
    :curpos 1
    :delim
     (copy delimcomma
      :startpos 1
      :delimlist
       (delimlist
        (copy delimcomma
         :delimlist
          (delimlist
           delimbracketangle))))
    :parent
     (textblock
      :text \"a,b,c\"
      :delim
       (delim
        :delimlist
         (delimlist
          (copy delimcomma
           :delimlist
            (delimlist
             delimbracketangle))))
      :children
       (textblocklist
        (textblock
         :text \"a\"
         :endpos 1)
        (textblock
         :text \",\"
         :startpos 1
         :endpos 2
         :delim
          (copy delimcomma
           :startpos 1
           :endpos 2))))))
 (textblock-push<-textblock-delim
  (textblock
   :text \"b,c\"
   :startpos 2
   :delim
    (delim
     :delimlist
      (delimlist
       (copy delimcomma
        :delimlist
         (delimlist
          (delim
           :name \"delimbracketangle\"
           :starttext \"<\"
           :endtext \">\")))))
   :parent
    (textblock
     :text \"a,b,c\"
     :delim
      (delim
       :delimlist
        (delimlist
         (copy delimcomma
          :delimlist
           (delimlist
            delimbracketangle))))
     :children
      (textblocklist
       (textblock
        :text \"a\"
        :endpos 1)
       (textblock
        :text \",\"
        :startpos 1
        :endpos 2
        :delim
         (copy delimcomma
          :startpos 1
          :endpos 2)))))
  (copy delimcomma
   :startpos 1
   :delimlist
    (delimlist
     delimbracketangle))))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "b"
            :startpos 2
            :endpos 3
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text ",c"
              :startpos 3
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :delimlist
                      (vx/data/textblock/delimlist
                       (vx/data/textblock/delim
                        :name "delimbracketangle"
                        :starttext "<"
                        :endtext ">")))))
                :children
                 (vx/data/textblock/textblocklist
                  (vx/data/textblock/textblock
                   :text "a"
                   :endpos 1)
                  (vx/data/textblock/textblock
                   :text ","
                   :startpos 1
                   :endpos 2
                   :delim
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :startpos 1
                     :endpos 2))))))
          :actual
           (vx/data/textblock/textblock
            :text "b"
            :startpos 2
            :endpos 3
            :delim
             (vx/data/textblock/delim
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketangle"
                 :starttext "<"
                 :endtext ">")))
            :parent
             (vx/data/textblock/textblock
              :text ",c"
              :startpos 3
              :curpos 1
              :delim
               (vx/data/textblock/delim
                :name "delimcomma"
                :starttext ","
                :startpos 1
                :delimlist
                 (vx/data/textblock/delimlist
                  (vx/data/textblock/delim
                   :name "delimcomma"
                   :starttext ","
                   :delimlist
                    (vx/data/textblock/delimlist
                     (vx/data/textblock/delim
                      :name "delimbracketangle"
                      :starttext "<"
                      :endtext ">")))))
              :parent
               (vx/data/textblock/textblock
                :text "a,b,c"
                :delim
                 (vx/data/textblock/delim
                  :delimlist
                   (vx/data/textblock/delimlist
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :delimlist
                      (vx/data/textblock/delimlist
                       (vx/data/textblock/delim
                        :name "delimbracketangle"
                        :starttext "<"
                        :endtext ">")))))
                :children
                 (vx/data/textblock/textblocklist
                  (vx/data/textblock/textblock
                   :text "a"
                   :endpos 1)
                  (vx/data/textblock/textblock
                   :text ","
                   :startpos 1
                   :endpos 2
                   :delim
                    (vx/data/textblock/delim
                     :name "delimcomma"
                     :starttext ","
                     :startpos 1
                     :endpos 2))))))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-startleft<-string-delim-offset"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :startpos 0
  :endpos 1)
 (textblock-startleft<-string-delim-offset
  \"a,b\"
  (delim
   :startpos 1)
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1)
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1)))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock-startright<-string-delim-offset"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \",b\"
  :startpos 1
  :curpos 1
  :delim
   (delim
    :starttext \",\"
    :startpos  1))
 (textblock-startright<-string-delim-offset
  \"a,b\"
  (delim
   :starttext \",\"
   :startpos  1)
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text ",b"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :starttext ","
              :startpos 1))
          :actual
           (vx/data/textblock/textblock
            :text ",b"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :starttext ","
              :startpos 1))))
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"<b>c\"
  :startpos 1
  :curpos 1
  :delim
   (copy delimbracketangle
    :startpos 1
    :delimlist
     (delimlist
      delimbracketcurly))
  :close
   (copy delimclose
    :starttext \">\"))
 (textblock-startright<-string-delim-offset
  \"a<b>c\"
  (copy delimbracketangle
   :startpos 1
   :delimlist
    (delimlist
     delimbracketcurly))
  0))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "<b>c"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :startpos 1
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketcurly"
                 :starttext "{"
                 :endtext "}")))
            :close
             (vx/data/textblock/delim
              :name "delimclose"
              :starttext ">"))
          :actual
           (vx/data/textblock/textblock
            :text "<b>c"
            :startpos 1
            :curpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimbracketangle"
              :starttext "<"
              :endtext ">"
              :startpos 1
              :delimlist
               (vx/data/textblock/delimlist
                (vx/data/textblock/delim
                 :name "delimbracketcurly"
                 :starttext "{"
                 :endtext "}")))
            :close
             (vx/data/textblock/delim
              :name "delimclose"
              :starttext ">"))))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/data/textblock"
     :casename "textblock<-string-delim"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (textblock
  :text \"a\"
  :startpos 0
  :endpos 1
  :delim delimcomma)
 (textblock<-string-delim
  \"a\"
  delimcomma))"
        :testpkg "vx/data/textblock"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimcomma"
              :starttext ","))
          :actual
           (vx/data/textblock/textblock
            :text "a"
            :endpos 1
            :delim
             (vx/data/textblock/delim
              :name "delimcomma"
              :starttext ",")))))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :delimbracketangle 0
      :delimbracketcurly 0
      :delimbracketsquare 0
      :delimclose 0
      :delimcomma 0
      :delimcomment 0
      :delimcommentblock 0
      :delimline 0
      :delimnonwhitespace 0
      :delimparen 0
      :delimquote 0
      :delimquoteblock 0
      :delimspace 0
      :delimtext 0
      :delimwhitespace 0)
    :funcmap
     (intmap
      :children<-textblock 0
      :delim-close<-delim 1
      :delim-first<-delim-delim 2
      :delim-first<-string-delimlist-offset 1
      :delim-pos<-string-delim-offset 1
      :delimlist-pos<-string-delimlist-offset 1
      :stringlist<-textblocklist 1
      :text<-textblock 1
      :textblock-addchild<-textblock-find-child 0
      :textblock-delimnotfound 0
      :textblock-findparent<-textblock 0
      :textblock-groupby<-textblock-delim 0
      :textblock-parse 2
      :textblock-parse-one 9
      :textblock-parse<-string-delim 0
      :textblock-pop 2
      :textblock-pop<-textblock-delim 2
      :textblock-push 2
      :textblock-push<-textblock-delim 2
      :textblock-startleft<-string-delim-offset 1
      :textblock-startright<-string-delim-offset 2
      :textblock<-string-delim 1
      :textblock<-textblock-delim 0)
    :testpkg "vx/data/textblock"
    :typemap
     (intmap
      :delim 0
      :delimlist 1
      :textblock 0
      :textblocklist 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :pct 4
      :tests 1
      :total 23)
    :bigotimenums
     (vx/test/testcoveragenums
      :pct 4
      :tests 1
      :total 23)
    :constnums
     (vx/test/testcoveragenums
      :total 15)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 42
      :total 42)
    :funcnums
     (vx/test/testcoveragenums
      :pct 69
      :tests 16
      :total 23)
    :testpkg "vx/data/textblock"
    :totalnums
     (vx/test/testcoveragenums
      :pct 40
      :tests 17
      :total 42)
    :typenums
     (vx/test/testcoveragenums
      :pct 25
      :tests 1
      :total 4))
  :passfail true
  :testpkg "vx/data/textblock")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :brancharrow-down 0
      :brancharrow-up 0
      :brancharrow-updown 0)
    :testpkg "vx/data/tree"
    :typemap
     (intmap
      :branch 0
      :brancharrow 0
      :branchlist 0
      :leaf 0
      :leaflist 0
      :tree 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :pct 100)
    :bigotimenums
     (vx/test/testcoveragenums
      :pct 100)
    :constnums
     (vx/test/testcoveragenums
      :total 3)
    :docnums
     (vx/test/testcoveragenums
      :total 9)
    :funcnums
     (vx/test/testcoveragenums
      :pct 100)
    :testpkg "vx/data/tree"
    :totalnums
     (vx/test/testcoveragenums
      :total 9)
    :typenums
     (vx/test/testcoveragenums
      :total 6))
  :passfail true
  :testpkg "vx/data/tree")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :delimxml 0
      :delimxmlequal 0)
    :funcmap
     (intmap
      :xml<-textblock 0)
    :testpkg "vx/data/xml"
    :typemap
     (intmap
      :xml 0
      :xmlnode 0
      :xmlnodelist 0
      :xmlpropmap 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 1)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 1)
    :constnums
     (vx/test/testcoveragenums
      :total 2)
    :docnums
     (vx/test/testcoveragenums
      :total 7)
    :funcnums
     (vx/test/testcoveragenums
      :total 1)
    :testpkg "vx/data/xml"
    :totalnums
     (vx/test/testcoveragenums
      :total 7)
    :typenums
     (vx/test/testcoveragenums
      :total 4))
  :passfail true
  :testpkg "vx/data/xml")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :event-click 0
      :event-move 0)
    :funcmap
     (intmap
      :any<-from-to 0)
    :testpkg "vx/event"
    :typemap
     (intmap
      :event 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 1)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 1)
    :constnums
     (vx/test/testcoveragenums
      :total 2)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 4
      :total 4)
    :funcnums
     (vx/test/testcoveragenums
      :total 1)
    :testpkg "vx/event"
    :totalnums
     (vx/test/testcoveragenums
      :total 4)
    :typenums
     (vx/test/testcoveragenums
      :total 1))
  :passfail true
  :testpkg "vx/event")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "any<-repl"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"HelloWorld\"
 (any<-repl
  (repl
   :type string
   :repllist
    (repllist
     (repl :val \"Hello\")
     (repl :val \"World\")
    ))))"
        :testpkg "vx/repl"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "HelloWorld"
          :actual "HelloWorld"))
       (vx/test/testdescribe
        :describename
         "(test
 5
 (any<-repl
  (repl
   :type +
   :repllist
    (repllist
     (repl :val 2)
     (repl :val 3)
    ))))"
        :testpkg "vx/repl"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5)))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :delimvxlisp 0
      :delimvxlispbracket 0
      :delimvxlispparen 0)
    :funcmap
     (intmap
      :any-repl<-functype-args 0
      :any<-liblist-string 0
      :any<-liblist-string-async 0
      :any<-repl 2
      :any<-repl-async 0
      :anylist<-repllist 0
      :macro 0
      :repl<-liblist-string 0
      :repl<-textblock 0
      :textblock-repl<-string 0)
    :testpkg "vx/repl"
    :typemap
     (intmap
      :liblist 0
      :repl 0
      :repllist 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 10)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 10)
    :constnums
     (vx/test/testcoveragenums
      :total 3)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 16
      :total 16)
    :funcnums
     (vx/test/testcoveragenums
      :pct 10
      :tests 1
      :total 10)
    :testpkg "vx/repl"
    :totalnums
     (vx/test/testcoveragenums
      :pct 6
      :tests 1
      :total 16)
    :typenums
     (vx/test/testcoveragenums
      :total 3))
  :passfail true
  :testpkg "vx/repl")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myconst"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4 myconst)"
        :testpkg "vx/sample"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myfunc"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 5 (myfunc 1))"
        :testpkg "vx/sample"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5)))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :myconst 1)
    :funcmap
     (intmap
      :main 0
      :myfunc 1)
    :testpkg "vx/sample"
    :typemap
     (intmap
      :mytype 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 2)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 2)
    :constnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 1
      :total 1)
    :docnums
     (vx/test/testcoveragenums
      :pct 50
      :tests 2
      :total 4)
    :funcnums
     (vx/test/testcoveragenums
      :pct 50
      :tests 1
      :total 2)
    :testpkg "vx/sample"
    :totalnums
     (vx/test/testcoveragenums
      :pct 50
      :tests 2
      :total 4)
    :typenums
     (vx/test/testcoveragenums
      :total 1))
  :passfail true
  :testpkg "vx/sample")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :change 0
      :register 0)
    :testpkg "vx/state"
    :typemap
     (intmap
      :value-map 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 2)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 2)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 33
      :tests 1
      :total 3)
    :funcnums
     (vx/test/testcoveragenums
      :total 2)
    :testpkg "vx/state"
    :totalnums
     (vx/test/testcoveragenums
      :total 3)
    :typenums
     (vx/test/testcoveragenums
      :total 1))
  :passfail true
  :testpkg "vx/state")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-test"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name \"testsuite.vxlisp\"
   :path \"src/test/resources\")))"
        :testpkg "vx/test"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testhtml"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name \"testsuite.html\"
   :path \"src/test/resources\")))"
        :testpkg "vx/test"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testnode"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name \"testsuitenode.vxlisp\"
   :path \"src/test/resources\")))"
        :testpkg "vx/test"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true)))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :constmap
     (intmap
      :stylesheet-test 0)
    :funcmap
     (intmap
      :context-test 0
      :div<-testcaselist 0
      :div<-testpackage 0
      :div<-testpackagelist 0
      :divchildlist<-testpackagelist 0
      :file-test 1
      :file-testhtml 1
      :file-testnode 1
      :html<-divtest 0
      :p<-passfail 0
      :p<-testcoveragenums 0
      :resolve-testcase 0
      :resolve-testcaselist 0
      :resolve-testdescribe 0
      :resolve-testdescribelist 0
      :resolve-testpackage 0
      :resolve-testpackagelist 0
      :resolve-testresult 0
      :security-test 0
      :test 0
      :test-false 0
      :test-false_1 0
      :test-gt 0
      :test-gt_1 0
      :test-ne 0
      :test-ne_1 0
      :test-string 0
      :test-string_1 0
      :test-true 0
      :test-true_1 0
      :test_1 0
      :tr<-testdescribe-casename 0
      :trlist<-testcase 0
      :trlist<-testcaselist 0)
    :testpkg "vx/test"
    :typemap
     (intmap
      :testcase 0
      :testcaselist 0
      :testcoveragedetail 0
      :testcoveragenums 0
      :testcoveragesummary 0
      :testdescribe 0
      :testdescribelist 0
      :testpackage 0
      :testpackagelist 0
      :testresult 0
      :testresultlist 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 34)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 34)
    :constnums
     (vx/test/testcoveragenums
      :total 1)
    :docnums
     (vx/test/testcoveragenums
      :pct 93
      :tests 43
      :total 46)
    :funcnums
     (vx/test/testcoveragenums
      :pct 10
      :tests 3
      :total 28)
    :testpkg "vx/test"
    :totalnums
     (vx/test/testcoveragenums
      :pct 7
      :tests 3
      :total 40)
    :typenums
     (vx/test/testcoveragenums
      :total 11))
  :passfail true
  :testpkg "vx/test")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "int<-string-find"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 2
 (int<-string-find \"abcdefg\" \"cd\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 2
          :actual 2))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "int<-string-findkeyword"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 2
 (int<-string-findkeyword \"ab	cdefg\" \":whitespace\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 2
          :actual 2))
       (vx/test/testdescribe
        :describename
         "(test
 4
 (int<-string-findkeyword \" 	
ab\" \":nonwhitespace\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true  (is-string \"\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true  (is-string \"a\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-false (is-string 5))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test-false (is-string (list)))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":false"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test-true (is-type false boolean))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (is-type \"a\"   string))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (is-type 5.5   number))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename "(test-true (is-type 4     int))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type<-any-typelist"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  false (typelist int boolean)))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  \"a\"   (typelist number string)))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  5.5   (typelist string number)))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))
       (vx/test/testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  4     (typelist string int)))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "length<-string"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test 4 (length<-string \"abcd\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4))
       (vx/test/testdescribe
        :describename "(test 0 (length<-string \"\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-int"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"4\"           (string<-int 4))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"))
       (vx/test/testdescribe
        :describename "(test \"51\"          (string<-int 51))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "51"
          :actual "51"))
       (vx/test/testdescribe
        :describename "(test \"notanumber\"  (string<-int notanumber))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "notanumber"
          :actual "notanumber"))
       (vx/test/testdescribe
        :describename "(test \"infinity\"    (string<-int infinity))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "infinity"
          :actual "infinity"))
       (vx/test/testdescribe
        :describename "(test \"neginfinity\" (string<-int neginfinity))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "neginfinity"
          :actual "neginfinity"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-end"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"abc\" (string<-string-end \"abcd\" 3))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"))
       (vx/test/testdescribe
        :describename "(test \"ab\"  (string<-string-end \"abcd\" 2))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"abcd\" (string<-string-start \"abcd\" 0))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "abcd"
          :actual "abcd"))
       (vx/test/testdescribe
        :describename "(test \"bcd\"  (string<-string-start \"abcd\" 1))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start-end"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename "(test \"abc\" (string<-string-start-end \"abcd\" 0 3))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"))
       (vx/test/testdescribe
        :describename "(test \"bc\"  (string<-string-start-end \"abcd\" 1 3))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "bc"
          :actual "bc"))
       (vx/test/testdescribe
        :describename "(test \"\"    (string<-string-start-end \"abcd\" 5 6))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true))
       (vx/test/testdescribe
        :describename "(test \"bcd\" (string<-string-start-end \"abcd\" 1 5))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-stringlist-join"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"a$b$c\"
 (string<-stringlist-join (stringlist \"a\" \"b\" \"c\") \"$\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "a$b$c"
          :actual "a$b$c"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/type"
     :casename "stringlist<-string-split"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 (stringlist \"a\" \"b\" \"c\")
 (stringlist<-string-split \"a$b$c\" \"$\"))"
        :testpkg "vx/type"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c"))))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :allowtypenames<-type 0
      :allowtypes<-type 0
      :any<-int 0
      :int<-string-find 1
      :int<-string-findkeyword 2
      :is-boolean 0
      :is-decimal 0
      :is-float 0
      :is-none 0
      :is-string 4
      :is-type 4
      :is-type<-any-typelist 4
      :length<-string 2
      :string<-int 5
      :string<-string-end 2
      :string<-string-start 2
      :string<-string-start-end 4
      :string<-stringlist-join 1
      :stringlist<-string-split 1
      :traitnames<-any 0
      :traits<-any 0
      :traits<-typedef 0)
    :testpkg "vx/type")
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 22)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 22)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 72
      :tests 16
      :total 22)
    :funcnums
     (vx/test/testcoveragenums
      :pct 54
      :tests 12
      :total 22)
    :testpkg "vx/type"
    :totalnums
     (vx/test/testcoveragenums
      :pct 54
      :tests 12
      :total 22)
    :typenums
     (vx/test/testcoveragenums
      :pct 100))
  :passfail true
  :testpkg "vx/type")
 (vx/test/testpackage
  :caselist
   (vx/test/testcaselist
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-body-indent"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<body></body>\"
 (string<-body-indent (body) 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<body></body>"
          :actual "<body></body>"))
       (vx/test/testdescribe
        :describename
         "(test
 \"<body>
  <div></div>
</body>\"
 (string<-body-indent (body (div)) 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           "<body>
  <div></div>
</body>"
          :actual
           "<body>
  <div></div>
</body>"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-div-indent"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<div></div>\"
 (string<-div-indent (div) 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<div></div>"
          :actual "<div></div>"))
       (vx/test/testdescribe
        :describename
         "(test
 \"<div id=\\"myid\\"></div>\"
 (string<-div-indent
  (div :id \"myid\") 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<div id=\"myid\"></div>"
          :actual "<div id=\"myid\"></div>"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-head-indent"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<head></head>\"
 (string<-head-indent (head) 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<head></head>"
          :actual "<head></head>"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-html"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>\"
 (string<-html
  (html :head (head) :body (body))))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
          :actual
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-meta-indent"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<meta charset=\\"utf-8\\" />\"
 (string<-meta-indent (meta :charset \"utf-8\") 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<meta charset=\"utf-8\" />"
          :actual "<meta charset=\"utf-8\" />"))))
    (vx/test/testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-p-indent"
     :describelist
      (vx/test/testdescribelist
       (vx/test/testdescribe
        :describename
         "(test
 \"<p>data</p>\"
 (string<-p-indent (p :text \"data\") 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<p>data</p>"
          :actual "<p>data</p>"))
       (vx/test/testdescribe
        :describename
         "(test
 \"<p id=\\"myid\\">data</p>\"
 (string<-p-indent
  (p :id \"myid\" :text \"data\") 0))"
        :testpkg "vx/web/html"
        :testresult
         (vx/test/testresult
          :code ":eq"
          :passfail true
          :expected "<p id=\"myid\">data</p>"
          :actual "<p id=\"myid\">data</p>")))))
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :htmlstring<-string 0
      :string-indent 0
      :string<-body-indent 2
      :string<-details-indent 0
      :string<-div-indent 2
      :string<-footer-indent 0
      :string<-h1-indent 0
      :string<-h2-indent 0
      :string<-h3-indent 0
      :string<-head-indent 1
      :string<-html 1
      :string<-indent 0
      :string<-meta-indent 1
      :string<-node-indent 0
      :string<-nodelist-indent 0
      :string<-nodelist-tag-prop-indent 0
      :string<-p-indent 2
      :string<-propname-val 0
      :string<-propstyle 0
      :string<-style-indent 0
      :string<-stylelist-indent 0
      :string<-stylepropmap-indent 0
      :string<-stylesheet-indent 0
      :string<-table-indent 0
      :string<-tbody-indent 0
      :string<-td-indent 0
      :string<-thead-indent 0
      :string<-title-indent 0
      :string<-tr-indent 0
      :string<-uri 0
      :style<-stylesheet-name 0
      :stylemap<-stylelist 0
      :stylemap<-stylesheet 0
      :styles<-stylesheet 0
      :stylesheet-loadmap 0
      :uri<-string 0)
    :testpkg "vx/web/html"
    :typemap
     (intmap
      :body 0
      :details 0
      :div 0
      :divchild 0
      :divchildlist 0
      :divlist 0
      :footer 0
      :h1 0
      :h2 0
      :h3 0
      :head 0
      :headchild 0
      :headchildlist 0
      :html 0
      :meta 0
      :node 0
      :nodelist 0
      :p 0
      :propmap 0
      :style 0
      :stylelist 0
      :stylemap 0
      :stylesheet 0
      :table 0
      :tbody 0
      :td 0
      :tdlist 0
      :thead 0
      :title 0
      :tr 0
      :trlist 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 36)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 36)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 98
      :tests 66
      :total 67)
    :funcnums
     (vx/test/testcoveragenums
      :pct 16
      :tests 6
      :total 36)
    :testpkg "vx/web/html"
    :totalnums
     (vx/test/testcoveragenums
      :pct 8
      :tests 6
      :total 67)
    :typenums
     (vx/test/testcoveragenums
      :total 31))
  :passfail true
  :testpkg "vx/web/html")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :boolean-write<-id-htmltext 0
      :boolean-write<-stylesheet 0
      :string<-id 0)
    :testpkg "vx/web/htmldoc")
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 3)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 3)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 100
      :tests 3
      :total 3)
    :funcnums
     (vx/test/testcoveragenums
      :total 3)
    :testpkg "vx/web/htmldoc"
    :totalnums
     (vx/test/testcoveragenums
      :total 3)
    :typenums
     (vx/test/testcoveragenums
      :pct 100))
  :passfail true
  :testpkg "vx/web/htmldoc")
 (vx/test/testpackage
  :coveragedetail
   (vx/test/testcoveragedetail
    :funcmap
     (intmap
      :csv<-httpget 0
      :json<-httpget 0
      :response<-httpget 0
      :text<-httpget 0
      :text<-response 0
      :textblock<-httpget 0
      :textblock<-response 0
      :xml<-httpget 0)
    :testpkg "vx/web/http"
    :typemap
     (intmap
      :response 0))
  :coveragesummary
   (vx/test/testcoveragesummary
    :bigospacenums
     (vx/test/testcoveragenums
      :total 8)
    :bigotimenums
     (vx/test/testcoveragenums
      :total 8)
    :constnums
     (vx/test/testcoveragenums
      :pct 100)
    :docnums
     (vx/test/testcoveragenums
      :pct 88
      :tests 8
      :total 9)
    :funcnums
     (vx/test/testcoveragenums
      :total 8)
    :testpkg "vx/web/http"
    :totalnums
     (vx/test/testcoveragenums
      :total 9)
    :typenums
     (vx/test/testcoveragenums
      :total 1))
  :passfail true
  :testpkg "vx/web/http"))