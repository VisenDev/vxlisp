(testpackagelist
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a" "b" "c")
 (list<-list-end
  (stringlist "a" "b" "c" "d")
  3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-filtertypes"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (list "a" 1 "b" "c")
 (list<-list-filtertypes : list
  (list "a" 1 "b" "c" 4.5)
  string int))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (list
            "a"
            1
            "b"
            "c")
          :actual
           (list
            "a"
            1
            "b"
            "c")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-fn-filter"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a1" "b1" "c1" "d1")
 (list<-list-fn-filter : stringlist
  (list "a" 4 "b" (list) "c" (map) "d")
  (fn : string
   [val : any]
   (if
    (then
     (is-string val)
     (string val "1"))))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")
          :actual
           (stringlist
            "a1"
            "b1"
            "c1"
            "d1")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "b" "c" "d")
 (list<-list-start
  (stringlist "a" "b" "c" "d")
  1))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c"
            "d")
          :actual
           (stringlist
            "b"
            "c"
            "d")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/collection"
     :casename "list<-list-start-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "b" "c")
 (list<-list-start-end
  (stringlist "a" "b" "c" "d")
  1 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "b"
            "c")
          :actual
           (stringlist
            "b"
            "c")
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :is-list 0
      :is-map 0
      :list<-list-end 1
      :list<-list-filtertypes 1
      :list<-list-fn-filter 1
      :list<-list-start 1
      :list<-list-start-end 1)
    :testpkg "vx/collection"
    :typemap (intmap))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 7
      :total 7)
    :funcnums
     (testcoveragenums
      :pct 71
      :testpkg ""
      :tests 5
      :total 7)
    :testpkg "vx/collection"
    :totalnums
     (testcoveragenums
      :pct 71
      :testpkg ""
      :tests 5
      :total 7)
    :typenums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/collection")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "boolean"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true true)"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false false)"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (boolean true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (boolean false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "float"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4.5 (float 4.5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4.5
          :actual 4.5
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (is-int 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-int "4"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-int infinity))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-int neginfinity))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-int notanumber))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (is-int "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (is-int 5.5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (string "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "ab" (string "a" "b"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "false"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false false)"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "true"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true true)"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false false)"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (! true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "!="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-ne true false)"
        :testpkg ""
        :testresult
         (testresult
          :code ":ne"
          :passfail true
          :expected true
          :actual false
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-ne "a" "b")"
        :testpkg ""
        :testresult
         (testresult
          :code ":ne"
          :passfail true
          :expected "a"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 6 (* 3 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 6
          :actual 6
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -10 (* 5 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -10
          :actual -10
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 6.4 (* 3.2 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 6.4
          :actual 6.4
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -10.2 (* 5.1 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -10.2
          :actual -10.2
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_2"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "*_3"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 24 (* 3 2 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -20 (* 5 -2 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -20
          :actual -20
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2  3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "+1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test  3 (+1  2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -1 (+1 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -1
          :actual -1
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 1 (- 3 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 7 (- 5 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "-_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (+ 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 3 (+ 5 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "/"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 3 (/ 6 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test -5 (/ 10 -2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected -5
          :actual -5
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (< 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (< 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (< "b" "d" "z"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (*
  (+
   (- 5 3)
   3)
  2)
 (<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 10
          :actual 10
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<<-"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (* (+ (- 3 5) 3) 2)
 (<<-
  5
  (- 3)
  (+ 3)
  (* 2)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 2
          :actual 2
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (<= 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "<=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (<= "b" "d" "z"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (= true true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (= 2 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (= "a" "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (= (stringlist "a" "b" "c") (new stringlist "a" "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (= (stringmap :a "1" :b "2") (new stringmap :a "1" :b "2")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-false (= 2 2 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (> 3 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (> "z" "y" "b"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">="
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (>= 3 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename ">=_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (>= "z" "b" "b"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (and true true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (and true false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "and_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (and true true true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (and true true false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "b"
 (any<-list (list "a" "b" "c") 1))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "b"
 (:1 (stringlist "a" "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-list-reduce"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 24
 (any<-list-reduce : int
  (intlist 3 2 4)
  1
  (fn : int
   [total : int
    num   : int]
   (* total num))
 ))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 24
          :actual 24
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "any<-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "v2"
 (any<-map (map :a "v1" :b "v2" :c "v3") :b))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "v2"
          :actual "v2"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "compare"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 1 (compare 3 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 1 (compare "z" "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (contains "abcde" "cd"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (contains "abcde" "dc"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "contains_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (contains (stringlist "1" "2" "3") "2"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (contains (intlist 1 2 3) 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (contains (list 1 "2" 3) 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "empty"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test ""     (empty string))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected ""
          :actual ""
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test (list) (empty list))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected (list)
          :actual (list)
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test (map)  (empty map))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected (map)
          :actual (map)
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "b" (first<-list (stringlist "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "first<-list-fn-any<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "b" (first<-list-fn-any<-any (list nothing "b" "c") resolve))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (if (= 2 2) "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test ""  (if : string (= 1 2) "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected ""
          :actual ""
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (if (= 2 2) "a" "b"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "b"  (if (= 1 2) "a" "b"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "b"
          :actual "b"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "if_2"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (if
  (then (= 2 3) false)
  (then (!= 3 3) false)
  (else (! false))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "int<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (int<-string "4"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 5 (int<-string "5.4"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 5 (int<-string "5.9"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test notanumber  (int<-string "notanumber"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected notanumber
          :actual notanumber
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test infinity    (int<-string "infinity"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected infinity
          :actual infinity
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test neginfinity (int<-string "neginfinity"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected neginfinity
          :actual neginfinity
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-empty_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (is-empty ""))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (is-empty (list)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (is-empty (map)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "is-number"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (is-number 5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-number 5.5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (is-number "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "last<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "c" (last<-list (list "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "c"
          :actual "c"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "length<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 3 (length<-list (stringlist "a" "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 3
          :actual 3
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "let"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 7
 (let
  [v1 : int := 2
   v2 : int := (+ v1 3)]
  (+ v1 v2)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 7
          :actual 7
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "list<-map"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a1" "b2")
 (list<-map : stringlist
  (stringmap "a" "1" "b" "2")
  (fn : string
   [key : string
    val : string]
   (string key val))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b2")
          :actual
           (stringlist
            "a1"
            "b2")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "map<-list"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (stringlist "a1" "b2")
 (list<-map : stringlist
  (stringmap "a" "1" "b" "2")
  (fn : string
   [key : string
    val : string]
   (string key val))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a1"
            "b2")
          :actual
           (stringlist
            "a1"
            "b2")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "new"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test true (new boolean true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 4 (new int 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 5.4 (new float 5.4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5.4
          :actual 5.4
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "a" (new string "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 (stringlist "a" "b" "c")
 (new stringlist "a" "b" "c"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringlist
            "a"
            "b"
            "c")
          :actual
           (stringlist
            "a"
            "b"
            "c")
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 (stringmap :a "1" :b "2")
 (new stringmap :a "1" :b "2"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (stringmap
            :a "1"
            :b "2")
          :actual
           (stringmap
            :a "1"
            :b "2")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (or true true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (or true false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (or false false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "or_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (or false true false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (or false false false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a" (resolve "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a"
          :actual "a"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve_1"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (resolve (fn : int [] (+ 1 3))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "resolve-async"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (resolve : int (fn : int [] (+ 1 3))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string-repeat"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "abab" (string-repeat "ab" 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abab"
          :actual "abab"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "string<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "true"  (string<-any true))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "true"
          :actual "true"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "4"     (string<-any 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "5.4"   (string<-any 5.4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "5.4"
          :actual "5.4"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "\"a\"" (string<-any "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected ""a""
          :actual ""a""
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "(stringlist
   \"a\"
   \"b\"
   \"c\")"
 (string<-any (stringlist "a" "b" "c")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringlist
 "a"
 "b"
 "c")"
          :actual
           "(stringlist
 "a"
 "b"
 "c")"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "(stringmap
   :a \"1\"
   :b \"2\")"
 (string<-any (stringmap :a "1" :b "2")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "(stringmap
 :a "1"
 :b "2")"
          :actual
           "(stringmap
 :a "1"
 :b "2")"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "switch"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test 1
 (switch : int
  "d"
  (case (list "b" "c" "d") 1)
  (else 2)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 1
          :actual 1
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "type<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test boolean (type<-any false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/boolean
          :actual vx/core/boolean
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test int (type<-any 5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/int
          :actual vx/core/int
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test string (type<-any "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected vx/core/string
          :actual vx/core/string
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/core"
     :casename "typename<-any"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "vx/core/boolean" (typename<-any false))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/boolean"
          :actual "vx/core/boolean"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "vx/core/int"     (typename<-any 5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/int"
          :actual "vx/core/int"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "vx/core/string"  (typename<-any "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "vx/core/string"
          :actual "vx/core/string"
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :false 1
      :globalpackagemap 0
      :infinity 0
      :mempool-active 0
      :msg-error 0
      :msg-info 0
      :msg-severe 0
      :msg-warning 0
      :neginfinity 0
      :newline 0
      :notanumber 0
      :nothing 0
      :quote 0
      :true 1)
    :funcmap
     (intmap
      :! 2
      :!-empty 0
      :!-empty_1 0
      :!= 2
      :* 2
      :*_1 2
      :*_2 2
      :*_3 2
      :+ 2
      :+_1 2
      :+_2 0
      :+_3 0
      :+1 2
      :- 2
      :-_1 2
      :-_2 0
      :-_3 0
      :. 0
      :/ 2
      :< 1
      :<_1 2
      :<- 1
      :<<- 1
      :<= 1
      :<=_1 1
      := 5
      :=_1 1
      :> 1
      :>_1 1
      :>= 1
      :>=_1 1
      :allowtypenames<-typedef 0
      :allowtypes<-typedef 0
      :and 2
      :and_1 2
      :any<-any 0
      :any<-any-async 0
      :any<-any-context 0
      :any<-any-context-async 0
      :any<-func 0
      :any<-func-async 0
      :any<-key-value 0
      :any<-key-value-async 0
      :any<-list 2
      :any<-list-reduce 1
      :any<-list-reduce-next 0
      :any<-map 1
      :any<-none 0
      :any<-none-async 0
      :any<-reduce 0
      :any<-reduce-async 0
      :any<-reduce-next 0
      :any<-reduce-next-async 0
      :any<-struct 0
      :async 0
      :boolean<-any 0
      :boolean<-func 0
      :boolean<-none 0
      :case 0
      :case_1 0
      :compare 2
      :contains 2
      :contains_1 3
      :copy 0
      :else 0
      :empty 3
      :extends<-any 0
      :extends<-typedef 0
      :first<-list 1
      :first<-list-fn-any<-any 1
      :fn 0
      :funcdef<-func 0
      :funcname<-funcdef 0
      :global-package-get 0
      :global-package-set 0
      :if 2
      :if_1 2
      :if_2 1
      :int<-func 0
      :int<-string 6
      :is-empty 0
      :is-empty_1 3
      :is-endswith 0
      :is-func 0
      :is-int 0
      :is-number 3
      :is-pass<-permission 0
      :last<-list 1
      :length<-list 1
      :let 1
      :let-async 0
      :list-join<-list 0
      :list<-list 0
      :list<-list-async 0
      :list<-map 1
      :list<-map-async 0
      :list<-type 0
      :log 0
      :map<-list 1
      :mempool-addref 0
      :mempool-release 0
      :mempool-removeref 0
      :mempool-removerefchildren 0
      :mempool-reserve 0
      :msg<-error 0
      :msgblock<-msgblock-msg 0
      :msgblock<-msgblock-msgblock 0
      :name<-typedef 0
      :native 0
      :native<-any 0
      :new 6
      :number<-func 0
      :or 3
      :or_1 2
      :packagename<-typedef 0
      :path<-context-path 0
      :path<-setting-path 0
      :permission<-id-context 0
      :properties<-typedef 0
      :proplast<-typedef 0
      :resolve 1
      :resolve_1 1
      :resolve-async 1
      :resolve-first 0
      :resolve-list 0
      :session<-context 0
      :setting<-context 0
      :string-repeat 1
      :string<-any 6
      :string<-any-indent 0
      :string<-func 0
      :switch 1
      :then 0
      :traits<-typedef 0
      :type<-any 3
      :typedef<-any 0
      :typedef<-type 0
      :typename<-any 3
      :typename<-type 0
      :typename<-typedef 0
      :typenames<-typelist 0
      :user<-context 0)
    :testpkg "vx/core"
    :typemap
     (intmap
      :any 0
      :any-async<-func 0
      :any<-anylist 0
      :anylist 0
      :anytype 0
      :arg 0
      :arglist 0
      :argmap 0
      :boolean 4
      :booleanlist 0
      :collection 0
      :compilelanguages 0
      :connect 0
      :connectlist 0
      :connectmap 0
      :const 0
      :constdef 0
      :constlist 0
      :constmap 0
      :context 0
      :decimal 0
      :error 0
      :float 1
      :func 0
      :funcdef 0
      :funclist 0
      :funcmap 0
      :int 7
      :intlist 0
      :intmap 0
      :list 0
      :listtype 0
      :map 0
      :maptype 0
      :mempool 0
      :msg 0
      :msgblock 0
      :msgblocklist 0
      :msglist 0
      :none 0
      :notype 0
      :number 0
      :numberlist 0
      :numbermap 0
      :package 0
      :packagemap 0
      :permission 0
      :permissionlist 0
      :permissionmap 0
      :security 0
      :session 0
      :setting 0
      :state 0
      :statelistener 0
      :string 2
      :stringlist 0
      :stringmap 0
      :struct 0
      :thenelse 0
      :thenelselist 0
      :type 0
      :typedef 0
      :typelist 0
      :typemap 0
      :user 0
      :value 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 14
      :testpkg ""
      :tests 2
      :total 14)
    :docnums
     (testcoveragenums
      :pct 80
      :testpkg ""
      :tests 179
      :total 222)
    :funcnums
     (testcoveragenums
      :pct 47
      :testpkg ""
      :tests 57
      :total 119)
    :testpkg "vx/core"
    :totalnums
     (testcoveragenums
      :pct 31
      :testpkg ""
      :tests 63
      :total 199)
    :typenums
     (testcoveragenums
      :pct 6
      :testpkg ""
      :tests 4
      :total 66))
  :passfail true
  :testpkg "vx/core")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :delims 0)
    :funcmap
     (intmap
      :csv<-textblock 0
      :csvrows<-textblock 0)
    :testpkg "vx/data/csv"
    :typemap
     (intmap
      :csv 0
      :csvrows 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1)
    :docnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 5)
    :funcnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 2)
    :testpkg "vx/data/csv"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 5)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 2))
  :passfail true
  :testpkg "vx/data/csv")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap (intmap)
    :testpkg "vx/data/db"
    :typemap
     (intmap
      :db 0
      :dbcell 0
      :dbcellmap 0
      :dbfield 0
      :dbfieldmap 0
      :dbtable 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 6
      :total 6)
    :funcnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :testpkg "vx/data/db"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 6)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 6))
  :passfail true
  :testpkg "vx/data/db")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-exists<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "boolean_exists_from_file.txt"
   :path "src/test/resources/vx")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "boolean-write<-file-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-write<-file-string
  (file
   :name "boolean_write_from_file_string.txt"
   :path "src/test/resources/vx")
  "writetext"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "file-read<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 (file
  :name "string_read_from_file.txt"
  :path "src/test/resources/vx"
  :text "testdata")
 (file-read<-file
  (file
   :name "string_read_from_file.txt"
   :path "src/test/resources/vx")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           (file
            :name "string_read_from_file.txt"
            :format 
            :path "src/test/resources/vx"
            :permission
             (permission
              :id "")
            :text "testdata")
          :actual
           (file
            :name "string_read_from_file.txt"
            :format 
            :path "src/test/resources/vx"
            :permission
             (permission
              :id "")
            :text "testdata")
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "pathcurrent<-os"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-endswith (pathcurrent<-os) "\java"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/data/file"
     :casename "string-read<-file"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "testdata"
 (string-read<-file
  (file
   :name "string_read_from_file.txt"
   :path "src/test/resources/vx")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "testdata"
          :actual "testdata"
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :boolean-exists<-file 1
      :boolean-write<-file-any 0
      :boolean-write<-file-string 1
      :file-read<-file 1
      :name<-file 0
      :path<-file 0
      :pathcurrent<-os 1
      :pathfull<-file 0
      :string-read<-file 1)
    :testpkg "vx/data/file"
    :typemap
     (intmap
      :file 0
      :fileformat 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 90
      :testpkg ""
      :tests 10
      :total 11)
    :funcnums
     (testcoveragenums
      :pct 55
      :testpkg ""
      :tests 5
      :total 9)
    :testpkg "vx/data/file"
    :totalnums
     (testcoveragenums
      :pct 45
      :testpkg ""
      :tests 5
      :total 11)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 2))
  :passfail true
  :testpkg "vx/data/file")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap (intmap)
    :testpkg "vx/data/table"
    :typemap
     (intmap
      :cell 0
      :celllist 0
      :cellmap 0
      :field 0
      :fieldlist 0
      :fieldmap 0
      :filter 0
      :row 0
      :rowlist 0
      :rowmap 0
      :sort 0
      :table 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 12)
    :funcnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :testpkg "vx/data/table"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 12)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 12))
  :passfail true
  :testpkg "vx/data/table")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :parse 0
      :stringlist<-textblocklist 0
      :text<-textblock 0
      :textblocks<-textblock 0)
    :testpkg "vx/data/textblock"
    :typemap
     (intmap
      :delimset 0
      :textblock 0
      :textblocklist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 42
      :testpkg ""
      :tests 3
      :total 7)
    :funcnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 4)
    :testpkg "vx/data/textblock"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 7)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 3))
  :passfail true
  :testpkg "vx/data/textblock")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :brancharrow-down 0
      :brancharrow-up 0
      :brancharrow-updown 0)
    :funcmap (intmap)
    :testpkg "vx/data/tree"
    :typemap
     (intmap
      :branch 0
      :brancharrow 0
      :branchlist 0
      :leaf 0
      :leaflist 0
      :tree 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 3)
    :docnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 9)
    :funcnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :testpkg "vx/data/tree"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 9)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 6))
  :passfail true
  :testpkg "vx/data/tree")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :xml<-textblock 0)
    :testpkg "vx/data/xml"
    :typemap
     (intmap
      :xml 0
      :xmlnode 0
      :xmlnodelist 0
      :xmlpropmap 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 5)
    :funcnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1)
    :testpkg "vx/data/xml"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 5)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 4))
  :passfail true
  :testpkg "vx/data/xml")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/repl"
     :casename "any<-repl"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "HelloWorld"
 (any<-repl
  (repl
   :type string
   :repllist
    (repllist
     (repl :val "Hello")
     (repl :val "World")
    ))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "HelloWorld"
          :actual "HelloWorld"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 5
 (any<-repl
  (repl
   :type +
   :repllist
    (repllist
     (repl :val 2)
     (repl :val 3)
    ))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :any-repl<-functype-args 0
      :any<-liblist-string 0
      :any<-liblist-string-async 0
      :any<-repl 2
      :any<-repl-async 0
      :anylist<-repllist 0
      :repl<-liblist-string 0)
    :testpkg "vx/repl"
    :typemap
     (intmap
      :liblist 0
      :repl 0
      :repllist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 10
      :total 10)
    :funcnums
     (testcoveragenums
      :pct 14
      :testpkg ""
      :tests 1
      :total 7)
    :testpkg "vx/repl"
    :totalnums
     (testcoveragenums
      :pct 10
      :testpkg ""
      :tests 1
      :total 10)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 3))
  :passfail true
  :testpkg "vx/repl")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myconst"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 myconst)"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/sample"
     :casename "myfunc"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 5 (myfunc 1))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 5
          :actual 5
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :myconst 1)
    :funcmap
     (intmap
      :main 0
      :myfunc 1)
    :testpkg "vx/sample"
    :typemap
     (intmap
      :mytype 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 1
      :total 1)
    :docnums
     (testcoveragenums
      :pct 50
      :testpkg ""
      :tests 2
      :total 4)
    :funcnums
     (testcoveragenums
      :pct 50
      :testpkg ""
      :tests 1
      :total 2)
    :testpkg "vx/sample"
    :totalnums
     (testcoveragenums
      :pct 50
      :testpkg ""
      :tests 2
      :total 4)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/sample")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :change 0
      :register 0)
    :testpkg "vx/state"
    :typemap
     (intmap
      :value-map 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 33
      :testpkg ""
      :tests 1
      :total 3)
    :funcnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 2)
    :testpkg "vx/state"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 3)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/state")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-test"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuite.vxlisp"
   :path "src/test/resources")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testhtml"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuite.html"
   :path "src/test/resources")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/test"
     :casename "file-testnode"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (boolean-exists<-file
  (file
   :name "testsuitenode.vxlisp"
   :path "src/test/resources")))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap
     (intmap
      :stylesheet-test 0)
    :funcmap
     (intmap
      :div<-testcaselist 0
      :div<-testpackage 0
      :div<-testpackagelist 0
      :divchildlist<-testpackagelist 0
      :file-test 1
      :file-testhtml 1
      :file-testnode 1
      :html<-divtest 0
      :p<-passfail 0
      :p<-testcoveragenums 0
      :resolve-testcase 0
      :resolve-testcaselist 0
      :resolve-testdescribe 0
      :resolve-testdescribelist 0
      :resolve-testpackage 0
      :resolve-testpackagelist 0
      :resolve-testresult 0
      :test 0
      :test_1 0
      :test-false 0
      :test-false_1 0
      :test-gt 0
      :test-gt_1 0
      :test-ne 0
      :test-ne_1 0
      :test-string 0
      :test-string_1 0
      :test-true 0
      :test-true_1 0
      :tr<-testdescribe-casename 0
      :trlist<-testcase 0
      :trlist<-testcaselist 0)
    :testpkg "vx/test"
    :typemap
     (intmap
      :testcase 0
      :testcaselist 0
      :testcoveragedetail 0
      :testcoveragenums 0
      :testcoveragesummary 0
      :testdescribe 0
      :testdescribelist 0
      :testpackage 0
      :testpackagelist 0
      :testresult 0
      :testresultlist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1)
    :docnums
     (testcoveragenums
      :pct 93
      :testpkg ""
      :tests 41
      :total 44)
    :funcnums
     (testcoveragenums
      :pct 11
      :testpkg ""
      :tests 3
      :total 26)
    :testpkg "vx/test"
    :totalnums
     (testcoveragenums
      :pct 7
      :testpkg ""
      :tests 3
      :total 38)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 11))
  :passfail true
  :testpkg "vx/test")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true  (is-string ""))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true  (is-string "a"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (is-string 5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-false (is-string (list)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":false"
          :passfail true
          :expected false
          :actual false
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test-true (is-type false boolean))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (is-type "a"   string))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (is-type 5.5   number))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test-true (is-type 4     int))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "is-type<-any-typelist"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  false (typelist int boolean)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  "a"   (typelist number string)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  5.5   (typelist string number)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test-true
 (is-type<-any-typelist
  4     (typelist string int)))"
        :testpkg ""
        :testresult
         (testresult
          :code ":true"
          :passfail true
          :expected true
          :actual true
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "length<-string"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test 4 (length<-string "abcd"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 4
          :actual 4
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test 0 (length<-string ""))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected 0
          :actual 0
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-int"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "4"           (string<-int 4))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "4"
          :actual "4"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "51"          (string<-int 51))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "51"
          :actual "51"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "notanumber"  (string<-int notanumber))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "notanumber"
          :actual "notanumber"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "infinity"    (string<-int infinity))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "infinity"
          :actual "infinity"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "neginfinity" (string<-int neginfinity))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "neginfinity"
          :actual "neginfinity"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "abc" (string<-string-end "abcd" 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "ab"  (string<-string-end "abcd" 2))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "ab"
          :actual "ab"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "abcd" (string<-string-start "abcd" 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abcd"
          :actual "abcd"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "bcd"  (string<-string-start "abcd" 1))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-string-start-end"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "abc" (string<-string-start-end "abcd" 0 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "abc"
          :actual "abc"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "bc"  (string<-string-start-end "abcd" 1 3))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bc"
          :actual "bc"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test ""    (string<-string-start-end "abcd" 5 6))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected ""
          :actual ""
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename "(test "bcd" (string<-string-start-end "abcd" 1 5))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "bcd"
          :actual "bcd"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/type"
     :casename "string<-stringlist-join"
     :describelist
      (testdescribelist
       (testdescribe
        :describename "(test "a$b$c" (string<-stringlist-join (stringlist "a" "b" "c") "$"))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "a$b$c"
          :actual "a$b$c"
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :allowtypenames<-type 0
      :allowtypes<-type 0
      :is-boolean 0
      :is-decimal 0
      :is-float 0
      :is-none 0
      :is-string 4
      :is-type 4
      :is-type<-any-typelist 4
      :length<-string 2
      :string<-int 5
      :string<-string-end 2
      :string<-string-start 2
      :string<-string-start-end 4
      :string<-stringlist-join 1
      :traitnames<-any 0
      :traits<-any 0
      :traits<-typedef 0)
    :testpkg "vx/type"
    :typemap (intmap))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 61
      :testpkg ""
      :tests 11
      :total 18)
    :funcnums
     (testcoveragenums
      :pct 50
      :testpkg ""
      :tests 9
      :total 18)
    :testpkg "vx/type"
    :totalnums
     (testcoveragenums
      :pct 50
      :testpkg ""
      :tests 9
      :total 18)
    :typenums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0))
  :passfail true
  :testpkg "vx/type")
 (testpackage
  :caselist
   (testcaselist
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-body-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<body></body>"
 (string<-body-indent (body) 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<body></body>"
          :actual "<body></body>"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "<body>
  <div></div>
</body>"
 (string<-body-indent (body (div)) 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "<body>
  <div></div>
</body>"
          :actual
           "<body>
  <div></div>
</body>"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-div-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<div></div>"
 (string<-div-indent (div) 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<div></div>"
          :actual "<div></div>"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "<div id=\"myid\"></div>"
 (string<-div-indent
  (div :id "myid") 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<div id="myid"></div>"
          :actual "<div id="myid"></div>"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-head-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<head></head>"
 (string<-head-indent (head) 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<head></head>"
          :actual "<head></head>"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-html"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
 (string<-html
  (html :head (head) :body (body))))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
          :actual
           "<!DOCTYPE html>
<html>
  <head></head>
  <body></body>
  <footer></footer>
</html>"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-meta-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<meta charset=\"utf-8\" />"
 (string<-meta-indent (meta :charset "utf-8") 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<meta charset="utf-8" />"
          :actual "<meta charset="utf-8" />"
          :fn-actual (vx/core/any<-func-async)))))
    (testcase
     :passfail true
     :testpkg "vx/web/html"
     :casename "string<-p-indent"
     :describelist
      (testdescribelist
       (testdescribe
        :describename
         "(test
 "<p>data</p>"
 (string<-p-indent (p :text "data") 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<p>data</p>"
          :actual "<p>data</p>"
          :fn-actual (vx/core/any<-func-async)))
       (testdescribe
        :describename
         "(test
 "<p id=\"myid\">data</p>"
 (string<-p-indent
  (p :id "myid" :text "data") 0))"
        :testpkg ""
        :testresult
         (testresult
          :code ":eq"
          :passfail true
          :expected "<p id="myid">data</p>"
          :actual "<p id="myid">data</p>"
          :fn-actual (vx/core/any<-func-async))))))
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :boolean-write<-id-htmltext 0
      :boolean-write<-stylesheet 0
      :htmlstring<-string 0
      :string-indent 0
      :string<-body-indent 2
      :string<-details-indent 0
      :string<-div-indent 2
      :string<-footer-indent 0
      :string<-h1-indent 0
      :string<-h2-indent 0
      :string<-h3-indent 0
      :string<-head-indent 1
      :string<-html 1
      :string<-indent 0
      :string<-meta-indent 1
      :string<-node-indent 0
      :string<-nodelist-indent 0
      :string<-nodelist-tag-prop-indent 0
      :string<-p-indent 2
      :string<-propname-val 0
      :string<-propstyle 0
      :string<-style-indent 0
      :string<-stylelist-indent 0
      :string<-stylepropmap-indent 0
      :string<-stylesheet-indent 0
      :string<-table-indent 0
      :string<-tbody-indent 0
      :string<-td-indent 0
      :string<-thead-indent 0
      :string<-title-indent 0
      :string<-tr-indent 0
      :string<-uri 0
      :style<-stylesheet-name 0
      :stylemap<-stylelist 0
      :stylemap<-stylesheet 0
      :styles<-stylesheet 0
      :stylesheet-loadmap 0
      :uri<-string 0)
    :testpkg "vx/web/html"
    :typemap
     (intmap
      :body 0
      :details 0
      :div 0
      :divchild 0
      :divchildlist 0
      :divlist 0
      :footer 0
      :h1 0
      :h2 0
      :h3 0
      :head 0
      :headchild 0
      :headchildlist 0
      :html 0
      :meta 0
      :node 0
      :nodelist 0
      :p 0
      :propmap 0
      :style 0
      :stylelist 0
      :stylemap 0
      :stylesheet 0
      :table 0
      :tbody 0
      :td 0
      :tdlist 0
      :thead 0
      :title 0
      :tr 0
      :trlist 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 98
      :testpkg ""
      :tests 68
      :total 69)
    :funcnums
     (testcoveragenums
      :pct 15
      :testpkg ""
      :tests 6
      :total 38)
    :testpkg "vx/web/html"
    :totalnums
     (testcoveragenums
      :pct 8
      :testpkg ""
      :tests 6
      :total 69)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 31))
  :passfail true
  :testpkg "vx/web/html")
 (testpackage
  :caselist (testcaselist)
  :coveragedetail
   (testcoveragedetail
    :constmap (intmap)
    :funcmap
     (intmap
      :csv<-httpget 0
      :json<-httpget 0
      :response<-httpget 0
      :text<-httpget 0
      :text<-response 0
      :textblock<-httpget 0
      :textblock<-response 0
      :xml<-httpget 0)
    :testpkg "vx/web/http"
    :typemap
     (intmap
      :response 0))
  :coveragesummary
   (testcoveragesummary
    :bigospacenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :bigotimenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 0)
    :constnums
     (testcoveragenums
      :pct 100
      :testpkg ""
      :tests 0
      :total 0)
    :docnums
     (testcoveragenums
      :pct 88
      :testpkg ""
      :tests 8
      :total 9)
    :funcnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 8)
    :testpkg "vx/web/http"
    :totalnums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 9)
    :typenums
     (testcoveragenums
      :pct 0
      :testpkg ""
      :tests 0
      :total 1))
  :passfail true
  :testpkg "vx/web/http"))