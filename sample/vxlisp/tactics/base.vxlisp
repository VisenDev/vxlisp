(package tactics/base
 :libs (lib html :path vx/web/html)
       (lib tb   :path vx/data/textblock)
       (lib xml  :path vx/data/xml)
 :doc "Tactics Base Types")

(type ability : struct
 :traits [card])

(type abilitylist : list
 :allowtypes [ability])

(type book : struct
 :traits     [card]
 :properties [chapterlist : chapterlist])

(type booklist : list
 :allowtypes [book])

(type card : struct
 :properties
  [name       : string
   titles     : string
   references : string
   summary    : string])

(type cardlist : list
 :allowtypes [card])

(type chapter : struct
 :traits     [card]
 :properties [sectionlist : sectionlist])

(type chapterlist : list
 :allowtypes [chapter])

(type deck : struct
 :traits     [card]
 :properties [cardlist : cardlist])

(type decklist : list
 :traits     [card]
 :allowtypes [deck])

(type item : struct
 :traits     [card]
 :properties [mass   : string])

(type itemlist : list
 :allowtypes [item])

(type location : struct
 :traits     [card]
 :properties [locationlist : locationlist
              unitlist     : unitlist])

(type locationlist : list
 :allowtypes [location])

(type playingcard : struct
 :traits     [card]
 :properties [rank : rank
              suit : suit])

(type power : struct
 :traits     [card]
 :properties
  [rating        : rating
   abilitylist   : abilitylist
   specialtylist : specialtylist])

(type powerlist : list
 :allowtypes [power])

(type rank : struct
 :traits  [card])

(type rating : struct
 :traits     [card]
 :properties [level : int
              scale : int])

(type rule : struct
 :traits     [card])

(type rulelist : list
 :allowtypes [rule])

(type scenario : struct
 :traits     [card]
 :properties [unitlist : unitlist])

(type scenariolist : list
 :allowtypes [scenario])

(type section : struct
 :traits     [card]
 :properties [decklist     : decklist
              itemlist     : itemlist
              locationlist : locationlist
              powerlist    : powerlist
              rulelist     : rulelist
              scenariolist : scenariolist
              sectionlist  : sectionlist
              skilllist    : skilllist
              suitlist     : suitlist
              unitlist     : unitlist])

(type sectionlist : list
 :allowtypes [section])

(type skill : struct
 :traits     [card]
 :properties [rating        : rating
              abilitylist   : abilitylist
              specialtylist : specialtylist])

(type skilllist : list
 :allowtypes [skill])

(type specialty : struct
 :traits     [card])

(type specialtylist : list
 :traits     [card]
 :allowtypes [specialty])

(type suit : struct
 :traits     [card])

(type suitlist : list
 :traits     [card]
 :allowtypes [suit])

(type unit : struct
 :traits     [card]
 :properties
  [body   : rating
   mind   : rating
   will   : rating
   move   : rating
   mass   : string
   skills : skilllist
   powers : powerlist])

(type unitlist : list
 :allowtypes [unit])

(const card-ace-spade : playingcard
 (playingcard
  :rank rank-ace
  :suit suit-spade))

(const rank-ace : rank)

(const suit-club : suit)

(const suit-diamond : suit)

(const suit-heart : suit)

(const suit-spade : suit)
