(package vx/type
 :doc "Type handling tools.")

(func allowtypenames<-type : stringlist
 [type : any]
 (typenames<-typelist (allowtypes<-type type))
 :doc "Get the name of a given type")

(func allowtypes<-type : typelist
 [type : any]
 (:allowtypes (typedef<-type type))
 :doc "Get the name of a given type")

(func is-boolean : boolean [value : any]
 (= "boolean" (typename<-any value)))

(func is-decimal : boolean [value : any]
 (= "decimal" (typename<-any value)))

(func is-float : boolean
 [value : any]
 (= "float" (typename<-any value)))

(func is-none : boolean
 [value : any]
 (= value none))

(func is-string : boolean
 [value : any]
 (= "vx/core/string" (typename<-any value))
 :test (test-true  (is-string ""))
       (test-true  (is-string "a"))
       (test-false (is-string 5))
       (test-false (is-string (list))))

(func is-type : boolean
 [val  : any
  type : any]
 (or
  (= (typename<-type type) (typename<-any val))
  (contains (allowtypenames<-type type) (typename<-any val))
  (contains (traitnames<-any val) (typename<-type type)))
 :test (test-true (is-type false boolean))
       (test-true (is-type "a"   string))
       (test-true (is-type 5.5   number))
       (test-true (is-type 4     int)))

(func is-type<-any-typelist : boolean
 [val      : any
  typelist : typelist]
 (any<-list-reduce : boolean
  typelist
  false
  (fn : boolean
   [result : boolean
    type   : any]
   (or result (is-type val type))
  )
 )
 :test (test-true
        (is-type<-any-typelist
         false (typelist int boolean)))
       (test-true
        (is-type<-any-typelist
         "a"   (typelist number string)))
       (test-true
        (is-type<-any-typelist
         5.5   (typelist string number)))
       (test-true
        (is-type<-any-typelist
         4     (typelist string int)))
 :doc "Returns true if val is any type in typelist.")

(func length<-string : int
 [text : string]
 (native
  :js
   "text.length"
  :java
   "int len = text.vx_string().length();
    output = Core.t_int.vx_new_from_int(len);")
 :test (test 4 (length<-string "abcd"))
       (test 0 (length<-string ""))
 :doc "Returns length of a string.")

(func string<-int : string
 [val : int]
 (switch val : string
  (case infinity    "infinity")
  (case neginfinity "neginfinity")
  (case notanumber  "notanumber")
  (else (string val)))
 :doc  "Function Type converting int to string"
 :test (test "4"           (string<-int 4))
       (test "51"          (string<-int 51))
       (test "notanumber"  (string<-int notanumber))
       (test "infinity"    (string<-int infinity))
       (test "neginfinity" (string<-int neginfinity)))

(func string<-string-end : string
 [text   : string
  endpos : int]
 (string<-string-start-end text 1 endpos)
 :test (test "abc" (string<-string-end "abcd" 3))
       (test "ab"  (string<-string-end "abcd" 2))
 :doc "Returns a substring between 0 end position.")

(func string<-string-start : string
 [text     : string
  startpos : int]
 (string<-string-start-end text startpos (length<-string text))
 :test (test "abcd" (string<-string-start "abcd" 1))
       (test "bcd"  (string<-string-start "abcd" 2))
 :doc "Returns a substring between start string end.")

(func string<-string-start-end : string
 [text  : string
  start : int
  end   : int]
 (native
  :js "text.substring(start, end)"
  :java
   "String stext = text.vx_string();
    int istart = start.vx_int();
    int iend = end.vx_int();
    int ilen = stext.length();
    if (istart >= ilen) {
      stext = “”;
    } else if (iend <= istart) {
      stext = “”;
    } else if (iend >= ilen) {
      stext = stext.substring(istart, ilen);
    } else {
      stext = stext.substring(istart, iend);
    }
    output = Core.t_string.vx_new_from_string(stext);")
 :test (test "abc" (string<-string-start-end "abcd" 1 3))
       (test "bc"  (string<-string-start-end "abcd" 2 3))
       (test ""    (string<-string-start-end "abcd" 5 6))
       (test "bcd" (string<-string-start-end "abcd" 2 5))
 :doc "Returns a substring between start and end positions.")

(func string<-stringlist-join : string
 [vals      : stringlist
  delim : string]
 (native
  :js "vals.join(delim)"
  :java
   "List<String> listvalstring = Core.arraylist_from_arraylist_fn(vals.vx_list(), (item) -> {
      Core.Type_string valstring = Core.f_any_from_any(Core.t_string, item);
      return valstring.vx_string();
    });
    String stext = String.join(delim.vx_string(), listvalstring);
    output = Core.t_string.vx_new_from_string(stext);")
 :test (test "a$b$c" (string<-stringlist-join (stringlist "a" "b" "c") "$")))

(func traitnames<-any : stringlist
 [val : any]
 (typenames<-typelist (traits<-any val))
 :doc "Get the trait names of a given type")

(func traits<-any : typelist
 [val : any]
 (traits<-typedef (typedef<-any val))
 :doc "Get the traits of a given value")

(func traits<-typedef : typelist
 [typedef : typedef]
 (:traits typedef)
 :doc "Get the traits of a given typedef")
